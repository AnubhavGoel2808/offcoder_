<!DOCTYPE html>
<html>
<head>
<style>
body{
    background-color: #212121;
    color: aliceblue;
    text-align: center;
     margin-left:20px;
    margin-right:20px;
}
.title{
    color: aquamarine;
}
.section-title{
    color: aqua;
}
pre{
text-align: left;
}
</style><script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}
    });
    MathJax.Hub.Register.StartupHook("End", function () {
        Codeforces.runMathJaxListeners();
    });
    </script>
    <script type="text/javascript" async
            src="https://mathjax.codeforces.org/MathJax.js?config=TeX-AMS_HTML-full"
    >
    </script><title>Page Title</title>
</head>
<body>
<div style="text-align: center; font-size: 1.8rem; margin-bottom: 0.5em;" class="caption">
 Codeforces Round #759 (Div. 2, based on Technocup 2022 Elimination Round 3)
</div>
<div style="margin-bottom: 2em;"> 
 <style>
        #facebox .content:has(.diff-popup) {
            width: 90vw;
            max-width: 120rem !important;
        }

        .diff-popup {
            width: 90vw;
            max-width: 120rem !important;
            display: none;
            overflow: auto;
        }

        .input-output-copier {
            font-size: 1.2rem;
            float: right;
            color: #888 !important;
            cursor: pointer;
            border: 1px solid rgb(185, 185, 185);
            padding: 3px;
            margin: 1px;
            line-height: 1.1rem;
            text-transform: none;
        }

        .input-output-copier:hover {
            background-color: #def;
        }

        .test-explanation textarea {
            width: 100%;
            height: 1.5em;
        }

        .pending-submission-message {
            color: darkorange !important;
        }
    </style> 
 <script>
        const OPENING_SPACE = String.fromCharCode(1001);
        const CLOSING_SPACE = String.fromCharCode(1002);

        const nodeToText = function (node, pre) {
            let result = [];

            if (node.tagName === "SCRIPT" || node.tagName === "math"
                || (node.classList && node.classList.contains("input-output-copier")))
                return [];

            if (node.tagName === "NOBR") {
                result.push(OPENING_SPACE);
            }

            if (node.nodeType === Node.TEXT_NODE) {
                let s = node.textContent;
                if (!pre) {
                    s = s.replace(/\s+/g, " ");
                }
                if (s.length > 0) {
                    result.push(s);
                }
            }

            if (pre && node.tagName === "BR") {
                result.push("\n");
            }

            node.childNodes.forEach(function (child) {
                result.push(nodeToText(child, node.tagName === "PRE").join(""));
            });

            if (node.tagName === "DIV"
                || node.tagName === "P"
                || node.tagName === "PRE"
                || node.tagName === "UL"
                || node.tagName === "LI"
            ) {
                result.push("\n");
            }

            if (node.tagName === "NOBR") {
                result.push(CLOSING_SPACE);
            }

            return result;
        }

        const isSpecial = function (c) {
            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';
        }

        const convertStatementToText = function(statmentNode) {
            const text = nodeToText(statmentNode, false).join("").replace(/ +/g, " ").replace(/\n\n+/g, "\n\n");
            let result = [];
            for (let i = 0; i < text.length; i++) {
                const c = text.charAt(i);
                if (c === OPENING_SPACE) {
                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {
                        result.push('+');
                    }
                } else if (c === CLOSING_SPACE) {
                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {
                        result.push('-');
                    }
                } else {
                    result.push(c);
                }
            }
            return result.join("").split("\n").map(value => value.trim()).join("\n");
        };
    </script> 
 <div class="diff-popup"> 
 </div> 
 <div class="problemindexholder" problemindex="A" data-uuid="ps_fe18ab8f94c99e8ed149ae2dc3e10ca23fc62c52"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      A. Life of a Flower
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given $$$n$$$ days from Petya's live and you have to determine what happened with his flower in the end.</p>
     <p>The flower grows as follows: </p>
     <ul> 
      <li> If the flower isn't watered for two days in a row, it dies. </li>
      <li> If the flower is watered in the $$$i$$$-th day, it grows by $$$1$$$ centimeter. </li>
      <li> If the flower is watered in the $$$i$$$-th and in the $$$(i-1)$$$-th day ($$$i &gt; 1$$$), then it grows by $$$5$$$ centimeters instead of $$$1$$$. </li>
      <li> If the flower is not watered in the $$$i$$$-th day, it does not grow. </li>
     </ul>
     <p>At the beginning of the $$$1$$$-st day the flower is $$$1$$$ centimeter tall. What is its height after $$$n$$$ days?</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.</p>
     <p>The first line of each test case contains the only integer $$$n$$$ ($$$1 \leq n \leq 100$$$).</p>
     <p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$a_i = 0$$$ or $$$a_i = 1$$$). If $$$a_i = 1$$$, the flower is watered in the $$$i$$$-th day, otherwise it is not watered.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print a single integer $$$k$$$ — the flower's height after $$$n$$$ days, or $$$-1$$$, if the flower dies.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
3
1 0 1
3
0 1 1
4
1 0 0 1
1
0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
7
-1
1
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=A]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {
        window.changedTests = new Set();
        console.log("Initialized window.changedTests.");

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");



        String.prototype.replaceAll = function (search, replace) {
            return this.split(search).join(replace);
        };

        $(".sample-test .title").each(function () {
            var preId = ("id" + Math.random()).replaceAll(".", "0");
            var cpyId = ("id" + Math.random()).replaceAll(".", "0");

            $(this).parent().find("pre").attr("id", preId);
            var $copy = $("<div title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier'>Copy</div>");
            $(this).append($copy);

            var clipboard = new Clipboard('#' + cpyId, {
                text: function (trigger) {
                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);
                }
            });

            var isInput = $(this).parent().hasClass("input");

            clipboard.on('success', function (e) {
                if (isInput) {
                    Codeforces.showMessage("The example input has been copied into the clipboard");
                } else {
                    Codeforces.showMessage("The example output has been copied into the clipboard");
                }
                e.clearSelection();
            });
        });

        $(".test-form-item input").change(function () {
            addPendingSubmissionMessage($($(this).closest("form")), "You changed the answer, do not forget to submit it if you want to save the changes");
            var index = $(this).closest(".problemindexholder").attr("problemindex");
            var test = "";
            $(this).closest("form input").each(function () {
                var test_ = $(this).attr("name");
                if (test_ && test_.substring(0, 4) === "test") {
                    test = test_;
                }
            });
            if (index.length > 0 && test.length > 0) {
                var indexTest = index + "::" + test;
                window.changedTests.add(indexTest);
            }
        });

        $(window).on('beforeunload', function () {
            if (window.changedTests.size > 0) {
                return 'Dialog text here';
            }
        });

        autosize($('.test-explanation textarea'));

    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="B" data-uuid="ps_d3271e94079c8b8db7d4a6eb17ab808cf20823c3"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      B. Array Eversion
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given an array $$$a$$$ of length $$$n$$$.</p>
     <p>Let's define the <span class="tex-font-style-it">eversion</span> operation. Let $$$x = a_n$$$. Then array $$$a$$$ is partitioned into two parts: left and right. The left part contains the elements of $$$a$$$ that are not greater than $$$x$$$ ($$$\le x$$$). The right part contains the elements of $$$a$$$ that are strictly greater than $$$x$$$ ($$$&gt; x$$$). The order of elements in each part is kept the same as before the operation, i.&nbsp;e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.</p>
     <p>For example, if the array $$$a$$$ is $$$[2, 4, 1, 5, 3]$$$, the eversion goes like this: $$$[2, 4, 1, 5, 3] \to [2, 1, 3], [4, 5] \to [2, 1, 3, 4, 5]$$$.</p>
     <p>We start with the array $$$a$$$ and perform eversions on this array. We can prove that after several eversions the array $$$a$$$ stops changing. Output the minimum number $$$k$$$ such that the array stops changing after $$$k$$$ eversions.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.</p>
     <p>The first line contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$).</p>
     <p>The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$).</p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print a single integer $$$k$$$ — the number of eversions after which the array stops changing.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
5
2 4 1 5 3
5
5 3 2 4 1
4
1 1 1 1
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1
2
0
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>Consider the fist example.</p>
     <ul> 
      <li> The first eversion: $$$a = [1, 4, 2, 5, 3]$$$, $$$x = 3$$$. $$$[2, 4, 1, 5, 3] \to [2, 1, 3], [4, 5] \to [2, 1, 3, 4, 5]$$$. </li>
      <li> The second and following eversions: $$$a = [2, 1, 3, 4, 5]$$$, $$$x = 5$$$. $$$[2, 1, 3, 4, 5] \to [2, 1, 3, 4, 5], [] \to [2, 1, 3, 4, 5]$$$. This eversion does not change the array, so the answer is $$$1$$$. </li>
     </ul>
     <p>Consider the second example. </p>
     <ul> 
      <li> The first eversion: $$$a = [5, 3, 2, 4, 1]$$$, $$$x = 1$$$. $$$[5, 3, 2, 4, 1] \to [1], [5, 3, 2, 4] \to [1, 5, 3, 2, 4]$$$. </li>
      <li> The second eversion: $$$a = [1, 5, 3, 2, 4]$$$, $$$x = 4$$$. $$$[1, 5, 3, 2, 4] \to [1, 3, 2, 4], [5] \to [1, 3, 2, 4, 5]$$$. </li>
      <li> The third and following eversions: $$$a = [1, 3, 2, 4, 5]$$$, $$$x = 5$$$. $$$[1, 3, 2, 4, 5] \to [1, 3, 2, 4, 5], [] \to [1, 3, 2, 4, 5]$$$. This eversion does not change the array, so the answer is $$$2$$$. </li>
     </ul>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=B]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="C" data-uuid="ps_8ade01ca658265cd019688b8b0a6e64868268042"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      C. Minimize Distance
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>A total of $$$n$$$ depots are located on a number line. Depot $$$i$$$ lies at the point $$$x_i$$$ for $$$1 \le i \le n$$$.</p>
     <p>You are a salesman with $$$n$$$ bags of goods, attempting to deliver one bag to each of the $$$n$$$ depots. You and the $$$n$$$ bags are initially at the origin $$$0$$$. You can carry up to $$$k$$$ bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.</p>
     <p>Calculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do <span class="tex-font-style-bf">not</span> have to return to the origin after you have delivered all the bags.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10\,500$$$). Description of the test cases follows.</p>
     <p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le k \le n \le 2 \cdot 10^5$$$).</p>
     <p>The second line of each test case contains $$$n$$$ integers $$$x_1, x_2, \ldots, x_n$$$ ($$$-10^9 \le x_i \le 10^9$$$). It is possible that some depots share the same position.</p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. </p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
5 1
1 2 3 4 5
9 3
-5 -10 -15 6 5 8 3 7 4
5 3
2 2 3 3 3
4 2
1000000000 1000000000 1000000000 1000000000
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>25
41
7
3000000000
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: $$$0 \to 2 \to 0 \to 4 \to 0 \to 3 \to 0 \to 1 \to 0 \to 5$$$, where each $$$0$$$ means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of $$$25$$$ units. It must be noted that there are other sequences that give the same distance.</p>
     <p>In the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: $$$0 \to 6 \to 8 \to 7 \to 0 \to 5 \to 4 \to 3 \to 0 \to (-5) \to (-10) \to (-15)$$$, with distance $$$41$$$. It can be shown that $$$41$$$ is the optimal distance for this test case.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=C]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D" data-uuid="ps_425ccf392b3cbd7eb3d50471d5cd634b2ecf436c"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D. Yet Another Sorting Problem
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Petya has an array of integers $$$a_1, a_2, \ldots, a_n$$$. He only likes sorted arrays. Unfortunately, the given array could be arbitrary, so Petya wants to sort it.</p>
     <p>Petya likes to challenge himself, so he wants to sort array using only $$$3$$$-cycles. More formally, in one operation he can pick $$$3$$$ <span class="tex-font-style-bf">pairwise distinct</span> indices $$$i$$$, $$$j$$$, and $$$k$$$ ($$$1 \leq i, j, k \leq n$$$) and apply $$$i \to j \to k \to i$$$ cycle to the array $$$a$$$. It simultaneously places $$$a_i$$$ on position $$$j$$$, $$$a_j$$$ on position $$$k$$$, and $$$a_k$$$ on position $$$i$$$, without changing any other element.</p>
     <p>For example, if $$$a$$$ is $$$[10, 50, 20, 30, 40, 60]$$$ and he chooses $$$i = 2$$$, $$$j = 1$$$, $$$k = 5$$$, then the array becomes $$$[\underline{50}, \underline{40}, 20, 30, \underline{10}, 60]$$$.</p>
     <p>Petya can apply arbitrary number of $$$3$$$-cycles (possibly, zero). You are to determine if Petya can sort his array $$$a$$$, i.&nbsp;e. make it non-decreasing.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \leq t \leq 5 \cdot 10^5$$$). Description of the test cases follows.</p>
     <p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 5 \cdot 10^5$$$)&nbsp;— the length of the array $$$a$$$.</p>
     <p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \leq a_i \leq n$$$).</p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, print "<span class="tex-font-style-tt">YES</span>" (without quotes) if Petya can sort the array $$$a$$$ using $$$3$$$-cycles, and "<span class="tex-font-style-tt">NO</span>" (without quotes) otherwise. You can print each letter in any case (upper or lower).</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>7
1
1
2
2 2
2
2 1
3
1 2 3
3
2 1 3
3
3 1 2
4
2 1 4 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>YES
YES
NO
YES
NO
YES
YES
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the $$$6$$$-th test case Petya can use the $$$3$$$-cycle $$$1 \to 3 \to 2 \to 1$$$ to sort the array.</p>
     <p>In the $$$7$$$-th test case Petya can apply $$$1 \to 3 \to 2 \to 1$$$ and make $$$a = [1, 4, 2, 3]$$$. Then he can apply $$$2 \to 4 \to 3 \to 2$$$ and finally sort the array.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="E" data-uuid="ps_6f7dfa3ce8ca52fa485345fe6979e885fb690d22"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      E. Frequency Queries
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>512 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Petya has a rooted tree with an integer written on each vertex. The vertex $$$1$$$ is the root. You are to answer some questions about the tree.</p>
     <p>A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a node $$$v$$$ is the next vertex on the shortest path from $$$v$$$ to the root.</p>
     <p>Each question is defined by three integers $$$v$$$, $$$l$$$, and $$$k$$$. To get the answer to the question, you need to perform the following steps: </p>
     <ul> 
      <li> First, write down the sequence of all integers written on the shortest path from the vertex $$$v$$$ to the root (including those written in the $$$v$$$ and the root). </li>
      <li> Count the number of times each integer occurs. Remove all integers with less than $$$l$$$ occurrences. </li>
      <li> Replace the sequence, removing all duplicates and ordering the elements by the number of occurrences in the original list in increasing order. In case of a tie, you can choose the order of these elements arbitrary. </li>
      <li> The answer to the question is the $$$k$$$-th number in the remaining sequence. Note that the answer is not always uniquely determined, because there could be several orderings. Also, it is possible that the length of the sequence on this step is less than $$$k$$$, in this case the answer is $$$-1$$$. </li>
     </ul>
     <p>For example, if the sequence of integers on the path from $$$v$$$ to the root is $$$[2, 2, 1, 7, 1, 1, 4, 4, 4, 4]$$$, $$$l = 2$$$ and $$$k = 2$$$, then the answer is $$$1$$$.</p>
     <p>Please answer all questions about the tree.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \leq t \leq 10^6$$$). Description of the test cases follows.</p>
     <p>The first line of each test case contains two integers $$$n$$$, $$$q$$$ ($$$1 \leq n, q \leq 10^6$$$) — the number of vertices in the tree and the number of questions.</p>
     <p>The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \leq a_i \leq n$$$), where $$$a_i$$$ is the number written on the $$$i$$$-th vertex.</p>
     <p>The third line contains $$$n-1$$$ integers $$$p_2, p_3, \ldots, p_n$$$ ($$$1 \leq p_i \leq n$$$), where $$$p_i$$$ is the parent of node $$$i$$$. It's guaranteed that the values $$$p$$$ define a correct tree.</p>
     <p>Each of the next $$$q$$$ lines contains three integers $$$v$$$, $$$l$$$, $$$k$$$ ($$$1 \leq v, l, k \leq n$$$) — descriptions of questions.</p>
     <p>It is guaranteed that the sum of $$$n$$$ and the sum of $$$q$$$ over all test cases do not exceed $$$10^6$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each question of each test case print the answer to the question. In case of multiple answers, print any.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>2
3 3
1 1 1
1 2
3 1 1
3 1 2
3 2 1
5 5
1 2 1 1 2
1 1 2 2
3 1 1
2 1 2
4 1 1
4 2 1
4 2 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1 -1 1 
1 1 2 1 -1 
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=E]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 1em;"> 
 <div class="problemindexholder" problemindex="F" data-uuid="ps_31bb8ae5c3894d56a65a802a861faf25e102cec9"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      F. Non-equal Neighbours
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>3 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>512 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given an array of $$$n$$$ positive integers $$$a_1, a_2, \ldots, a_n$$$. Your task is to calculate the number of arrays of $$$n$$$ positive integers $$$b_1, b_2, \ldots, b_n$$$ such that: </p>
     <ul> 
      <li> $$$1 \le b_i \le a_i$$$ for every $$$i$$$ ($$$1 \le i \le n$$$), and </li>
      <li> $$$b_i \neq b_{i+1}$$$ for every $$$i$$$ ($$$1 \le i \le n - 1$$$). </li>
     </ul>
     <p>The number of such arrays can be very large, so print it modulo $$$998\,244\,353$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$)&nbsp;— the length of the array $$$a$$$.</p>
     <p>The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^9$$$).</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Print the answer modulo $$$998\,244\,353$$$ in a single line.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
2 2 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>2</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>2
2 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
1 1 1
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>0</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case possible arrays are $$$[1, 2, 1]$$$ and $$$[2, 1, 2]$$$.</p>
     <p>In the second test case possible arrays are $$$[1, 2]$$$, $$$[1, 3]$$$, $$$[2, 1]$$$ and $$$[2, 3]$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=F]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/51631");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div>
<div>
 <a href="https://codeforces.com/">Codeforces</a> (c) Copyright 2010-2021 Mike Mirzayanov
</div> 
<div>
 The only programming contests Web 2.0 platform
</div>
</body>
</html>