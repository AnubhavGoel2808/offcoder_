<!DOCTYPE html>
<html>
<head>
<style>
body{
    background-color: black;
    color: aliceblue;
    text-align: center;
}
.title{
    color: aquamarine;
}
.section-title{
    color: aqua;
}
pre{
text-align: left;
}
</style><script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}
    });
    MathJax.Hub.Register.StartupHook("End", function () {
        Codeforces.runMathJaxListeners();
    });
    </script>
    <script type="text/javascript" async
            src="https://mathjax.codeforces.org/MathJax.js?config=TeX-AMS_HTML-full"
    >
    </script><title>Page Title</title>
</head>
<body>
<div style="text-align: center; font-size: 1.8rem; margin-bottom: 0.5em;" class="caption">
 Codeforces Round #762 (Div. 3)
</div>
<div style="margin-bottom: 2em;"> 
 <style>
        #facebox .content:has(.diff-popup) {
            width: 90vw;
            max-width: 120rem !important;
        }

        .diff-popup {
            width: 90vw;
            max-width: 120rem !important;
            display: none;
            overflow: auto;
        }

        .input-output-copier {
            font-size: 1.2rem;
            float: right;
            color: #888 !important;
            cursor: pointer;
            border: 1px solid rgb(185, 185, 185);
            padding: 3px;
            margin: 1px;
            line-height: 1.1rem;
            text-transform: none;
        }

        .input-output-copier:hover {
            background-color: #def;
        }

        .test-explanation textarea {
            width: 100%;
            height: 1.5em;
        }

        .pending-submission-message {
            color: darkorange !important;
        }
    </style> 
 <script>
        const OPENING_SPACE = String.fromCharCode(1001);
        const CLOSING_SPACE = String.fromCharCode(1002);

        const nodeToText = function (node, pre) {
            let result = [];

            if (node.tagName === "SCRIPT" || node.tagName === "math"
                || (node.classList && node.classList.contains("input-output-copier")))
                return [];

            if (node.tagName === "NOBR") {
                result.push(OPENING_SPACE);
            }

            if (node.nodeType === Node.TEXT_NODE) {
                let s = node.textContent;
                if (!pre) {
                    s = s.replace(/\s+/g, " ");
                }
                if (s.length > 0) {
                    result.push(s);
                }
            }

            if (pre && node.tagName === "BR") {
                result.push("\n");
            }

            node.childNodes.forEach(function (child) {
                result.push(nodeToText(child, node.tagName === "PRE").join(""));
            });

            if (node.tagName === "DIV"
                || node.tagName === "P"
                || node.tagName === "PRE"
                || node.tagName === "UL"
                || node.tagName === "LI"
            ) {
                result.push("\n");
            }

            if (node.tagName === "NOBR") {
                result.push(CLOSING_SPACE);
            }

            return result;
        }

        const isSpecial = function (c) {
            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';
        }

        const convertStatementToText = function(statmentNode) {
            const text = nodeToText(statmentNode, false).join("").replace(/ +/g, " ").replace(/\n\n+/g, "\n\n");
            let result = [];
            for (let i = 0; i < text.length; i++) {
                const c = text.charAt(i);
                if (c === OPENING_SPACE) {
                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {
                        result.push('+');
                    }
                } else if (c === CLOSING_SPACE) {
                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {
                        result.push('-');
                    }
                } else {
                    result.push(c);
                }
            }
            return result.join("").split("\n").map(value => value.trim()).join("\n");
        };
    </script> 
 <div class="diff-popup"> 
 </div> 
 <div class="problemindexholder" problemindex="A" data-uuid="ps_4a84d2f1c0cf90a3e5dead3b8c22ab0cc23a4210"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      A. Square String?
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>A string is called <span class="tex-font-style-it">square</span> if it is some string written twice in a row. For example, the strings "<span class="tex-font-style-tt">aa</span>", "<span class="tex-font-style-tt">abcabc</span>", "<span class="tex-font-style-tt">abab</span>" and "<span class="tex-font-style-tt">baabaa</span>" are square. But the strings "<span class="tex-font-style-tt">aaa</span>", "<span class="tex-font-style-tt">abaaab</span>" and "<span class="tex-font-style-tt">abcdabc</span>" are not square.</p>
     <p>For a given string $$$s$$$ determine if it is square.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of input data contains an integer $$$t$$$ ($$$1 \le t \le 100$$$)&nbsp;—the number of test cases.</p>
     <p>This is followed by $$$t$$$ lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between $$$1$$$ and $$$100$$$ inclusive.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, output on a separate line:</p>
     <ul> 
      <li> <span class="tex-font-style-tt">YES</span> if the string in the corresponding test case is square, </li>
      <li> <span class="tex-font-style-tt">NO</span> otherwise. </li>
     </ul>
     <p>You can output <span class="tex-font-style-tt">YES</span> and <span class="tex-font-style-tt">NO</span> in any case (for example, strings <span class="tex-font-style-tt">yEs</span>, <span class="tex-font-style-tt">yes</span>, <span class="tex-font-style-tt">Yes</span> and <span class="tex-font-style-tt">YES</span> will be recognized as a positive response).</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>10
a
aa
aaa
aaaa
abab
abcabc
abacaba
xxyy
xyyx
xyxy
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>NO
YES
NO
YES
YES
YES
NO
NO
NO
YES
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=A]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {
        window.changedTests = new Set();
        console.log("Initialized window.changedTests.");

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");



        String.prototype.replaceAll = function (search, replace) {
            return this.split(search).join(replace);
        };

        $(".sample-test .title").each(function () {
            var preId = ("id" + Math.random()).replaceAll(".", "0");
            var cpyId = ("id" + Math.random()).replaceAll(".", "0");

            $(this).parent().find("pre").attr("id", preId);
            var $copy = $("<div title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier'>Copy</div>");
            $(this).append($copy);

            var clipboard = new Clipboard('#' + cpyId, {
                text: function (trigger) {
                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);
                }
            });

            var isInput = $(this).parent().hasClass("input");

            clipboard.on('success', function (e) {
                if (isInput) {
                    Codeforces.showMessage("The example input has been copied into the clipboard");
                } else {
                    Codeforces.showMessage("The example output has been copied into the clipboard");
                }
                e.clearSelection();
            });
        });

        $(".test-form-item input").change(function () {
            addPendingSubmissionMessage($($(this).closest("form")), "You changed the answer, do not forget to submit it if you want to save the changes");
            var index = $(this).closest(".problemindexholder").attr("problemindex");
            var test = "";
            $(this).closest("form input").each(function () {
                var test_ = $(this).attr("name");
                if (test_ && test_.substring(0, 4) === "test") {
                    test = test_;
                }
            });
            if (index.length > 0 && test.length > 0) {
                var indexTest = index + "::" + test;
                window.changedTests.add(indexTest);
            }
        });

        $(window).on('beforeunload', function () {
            if (window.changedTests.size > 0) {
                return 'Dialog text here';
            }
        });

        autosize($('.test-explanation textarea'));

    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="B" data-uuid="ps_cdc9e6ca1cf0ef803a9796ecabb7e460ffbe5d55"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      B. Squares and Cubes
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: $$$1$$$, $$$4$$$, $$$8$$$, $$$9$$$, ....</p>
     <p>For a given number $$$n$$$, count the number of integers from $$$1$$$ to $$$n$$$ that Polycarp likes. In other words, find the number of such $$$x$$$ that $$$x$$$ is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains an integer $$$t$$$ ($$$1 \le t \le 20$$$) — the number of test cases.</p>
     <p>Then $$$t$$$ lines contain the test cases, one per line. Each of the lines contains one integer $$$n$$$ ($$$1 \le n \le 10^9$$$).</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, print the answer you are looking for — the number of integers from $$$1$$$ to $$$n$$$ that Polycarp likes.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>6
10
1
25
1000000000
999999999
500000000
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4
1
6
32591
32590
23125
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=B]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="C" data-uuid="ps_d36681b6f78020dcce90108ce5c7d230de7bc7bc"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      C. Wrong Addition
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Tanya is learning how to add numbers, but so far she is not doing it correctly. She is adding two numbers $$$a$$$ and $$$b$$$ using the following algorithm:</p>
     <ol> 
      <li> If one of the numbers is shorter than the other, Tanya adds leading zeros so that the numbers are the same length. </li>
      <li> The numbers are processed from right to left (that is, from the least significant digits to the most significant). </li>
      <li> In the first step, she adds the last digit of $$$a$$$ to the last digit of $$$b$$$ and writes their sum in the answer. </li>
      <li> At each next step, she performs the same operation on each pair of digits in the same place and writes the result to the <span class="tex-font-style-bf">left</span> side of the answer. </li>
     </ol> 
     <p>For example, the numbers $$$a = 17236$$$ and $$$b = 3465$$$ Tanya adds up as follows:</p>
     <p>$$$$$$ \large{ \begin{array}{r} + \begin{array}{r} 17236\\ 03465\\ \end{array} \\ \hline \begin{array}{r} 1106911 \end{array} \end{array}} $$$$$$</p>
     <ul> 
      <li> calculates the sum of $$$6 + 5 = 11$$$ and writes $$$11$$$ in the answer. </li>
      <li> calculates the sum of $$$3 + 6 = 9$$$ and writes the result to the left side of the answer to get $$$911$$$. </li>
      <li> calculates the sum of $$$2 + 4 = 6$$$ and writes the result to the left side of the answer to get $$$6911$$$. </li>
      <li> calculates the sum of $$$7 + 3 = 10$$$, and writes the result to the left side of the answer to get $$$106911$$$. </li>
      <li> calculates the sum of $$$1 + 0 = 1$$$ and writes the result to the left side of the answer and get $$$1106911$$$. </li>
     </ul>
     <p>As a result, she gets $$$1106911$$$.</p>
     <p>You are given two positive integers $$$a$$$ and $$$s$$$. Find the number $$$b$$$ such that by adding $$$a$$$ and $$$b$$$ as described above, Tanya will get $$$s$$$. Or determine that no suitable $$$b$$$ exists.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of input data contains an integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.</p>
     <p>Each test case consists of a single line containing two positive integers $$$a$$$ and $$$s$$$ ($$$1 \le a \lt s \le 10^{18}$$$) separated by a space.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print the answer on a separate line.</p>
     <p>If the solution exists, print a single positive integer $$$b$$$. The answer must be written without leading zeros. If multiple answers exist, print any of them.</p>
     <p>If no suitable number $$$b$$$ exists, output <span class="tex-font-style-tt">-1</span>.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>6
17236 1106911
1 5
108 112
12345 1023412
1 11
1 20
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3465
4
-1
90007
10
-1
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>The first test case is explained in the main part of the statement.</p>
     <p>In the third test case, we cannot choose $$$b$$$ that satisfies the problem statement.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=C]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D" data-uuid="ps_cdbb421a7e457241f8c793b6da764a71b95f8c22"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D. New Year's Problem
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Vlad has $$$n$$$ friends, for each of whom he wants to buy <span class="tex-font-style-it">one</span> gift for the New Year.</p>
     <p>There are $$$m$$$ shops in the city, in each of which he can buy a gift for any of his friends. If the $$$j$$$-th friend ($$$1 \le j \le n$$$) receives a gift bought in the shop with the number $$$i$$$ ($$$1 \le i \le m$$$), then the friend receives $$$p_{ij}$$$ units of joy. The rectangular table $$$p_{ij}$$$ is given in the input.</p>
     <p>Vlad has time to visit at most $$$n-1$$$ shops (where $$$n$$$ is the number of <span class="tex-font-style-bf">friends</span>). He chooses which shops he will visit and for which friends he will buy gifts in each of them.</p>
     <p>Let the $$$j$$$-th friend receive $$$a_j$$$ units of joy from Vlad's gift. Let's find the value $$$\alpha=\min\{a_1, a_2, \dots, a_n\}$$$. Vlad's goal is to buy gifts so that the value of $$$\alpha$$$ is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends.</p>
     <p>For example, let $$$m = 2$$$, $$$n = 2$$$. Let the joy from the gifts that we can buy in the first shop: $$$p_{11} = 1$$$, $$$p_{12}=2$$$, in the second shop: $$$p_{21} = 3$$$, $$$p_{22}=4$$$.</p>
     <p>Then it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy $$$3$$$, and for the second&nbsp;— bringing joy $$$4$$$. In this case, the value $$$\alpha$$$ will be equal to $$$\min\{3, 4\} = 3$$$</p>
     <p>Help Vlad choose gifts for his friends so that the value of $$$\alpha$$$ is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most $$$n-1$$$ shops (where $$$n$$$ is the number of <span class="tex-font-style-bf">friends</span>). In the shop, he can buy any number of gifts.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains an integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the input.</p>
     <p>An empty line is written before each test case. Then there is a line containing integers $$$m$$$ and $$$n$$$ ($$$2 \le n$$$, $$$2 \le n \cdot m \le 10^5$$$) separated by a space&nbsp;— the number of shops and the number of friends, where $$$n \cdot m$$$ is the product of $$$n$$$ and $$$m$$$.</p>
     <p>Then $$$m$$$ lines follow, each containing $$$n$$$ numbers. The number in the $$$i$$$-th row of the $$$j$$$-th column $$$p_{ij}$$$ ($$$1 \le p_{ij} \le 10^9$$$) is the joy of the product intended for friend number $$$j$$$ in shop number $$$i$$$.</p>
     <p>It is guaranteed that the sum of the values $$$n \cdot m$$$ over all test cases in the test does not exceed $$$10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Print $$$t$$$ lines, each line must contain the answer to the corresponding test case&nbsp;— the maximum possible value of $$$\alpha$$$, where $$$\alpha$$$ is the minimum of the joys from a gift for all of Vlad's friends.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5

2 2
1 2
3 4

4 3
1 3 1
3 1 1
1 2 2
1 1 3

2 3
5 3 4
2 5 1

4 2
7 9
8 1
9 6
10 8

2 4
6 5 2 1
7 9 7 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
2
4
8
2
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="E" data-uuid="ps_f52f4be6ed09a4f6b0e047928e3c420dc765670f"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      E. MEX and Increments
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Dmitry has an array of $$$n$$$ non-negative integers $$$a_1, a_2, \dots, a_n$$$.</p>
     <p>In one operation, Dmitry can choose any index $$$j$$$ ($$$1 \le j \le n$$$) and increase the value of the element $$$a_j$$$ by $$$1$$$. He can choose the same index $$$j$$$ multiple times.</p>
     <p>For each $$$i$$$ from $$$0$$$ to $$$n$$$, determine whether Dmitry can make the $$$\mathrm{MEX}$$$ of the array equal to exactly $$$i$$$. If it is possible, then determine the minimum number of operations to do it.</p>
     <p>The $$$\mathrm{MEX}$$$ of the array is equal to the minimum non-negative integer that is not in the array. For example, the $$$\mathrm{MEX}$$$ of the array $$$[3, 1, 0]$$$ is equal to $$$2$$$, and the array $$$[3, 3, 1, 4]$$$ is equal to $$$0$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$)&nbsp;— the number of test cases in the input. </p>
     <p>The descriptions of the test cases follow.</p>
     <p>The first line of the description of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$)&nbsp;— the length of the array $$$a$$$.</p>
     <p>The second line of the description of each test case contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$0 \le a_i \le n$$$)&nbsp;— elements of the array $$$a$$$.</p>
     <p>It is guaranteed that the sum of the values $$$n$$$ over all test cases in the test does not exceed $$$2\cdot10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, output $$$n + 1$$$ integer&nbsp;— $$$i$$$-th number is equal to the minimum number of operations for which you can make the array $$$\mathrm{MEX}$$$ equal to $$$i$$$ ($$$0 \le i \le n$$$), or <span class="tex-font-style-tt">-1</span> if this cannot be done.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5
3
0 1 3
7
0 1 2 3 4 3 2
4
3 0 0 0
7
4 6 2 3 5 0 5
5
4 0 1 0 4
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1 1 0 -1 
1 1 2 2 1 0 2 6 
3 0 1 4 3 
1 0 -1 -1 -1 -1 -1 -1 
2 1 0 2 -1 -1 
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first set of example inputs, $$$n=3$$$:</p>
     <ul> 
      <li> to get $$$\mathrm{MEX}=0$$$, it is enough to perform one increment: $$$a_1$$$<span class="tex-font-style-tt">++</span>; </li>
      <li> to get $$$\mathrm{MEX}=1$$$, it is enough to perform one increment: $$$a_2$$$<span class="tex-font-style-tt">++</span>; </li>
      <li> $$$\mathrm{MEX}=2$$$ for a given array, so there is no need to perform increments; </li>
      <li> it is impossible to get $$$\mathrm{MEX}=3$$$ by performing increments. </li>
     </ul>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=E]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="F" data-uuid="ps_71f772d66c20e959dd7dd849846f8822a399e525"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      F. Let's Play the Hat?
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p><span class="tex-font-style-it">The Hat is a game of speedy explanation/guessing words (similar to Alias). It's fun. Try it! In this problem, we are talking about a variant of the game when the players are sitting at the table and everyone plays individually (i.e. not teams, but individual gamers play).</span></p>
     <p>$$$n$$$ people gathered in a room with $$$m$$$ tables ($$$n \ge 2m$$$). They want to play the Hat $$$k$$$ times. Thus, $$$k$$$ games will be played at each table. Each player will play in $$$k$$$ games.</p>
     <p>To do this, they are distributed among the tables for each game. During each game, one player plays at exactly one table. A player can play at different tables.</p>
     <p>Players want to have the most "fair" schedule of games. For this reason, they are looking for a schedule (table distribution for each game) such that:</p>
     <ul> 
      <li> At any table in each game there are either $$$\lfloor\frac{n}{m}\rfloor$$$ people or $$$\lceil\frac{n}{m}\rceil$$$ people (that is, either $$$n/m$$$ rounded down, or $$$n/m$$$ rounded up). Different numbers of people can play different games at the same table.</li>
      <li> Let's calculate for each player the value $$$b_i$$$ — the number of times the $$$i$$$-th player played at a table with $$$\lceil\frac{n}{m}\rceil$$$ persons ($$$n/m$$$ rounded up). Any two values of $$$b_i$$$must differ by no more than $$$1$$$. In other words, for any two players $$$i$$$ and $$$j$$$, it must be true $$$|b_i - b_j| \le 1$$$. </li>
     </ul>
     <p>For example, if $$$n=5$$$, $$$m=2$$$ and $$$k=2$$$, then at the request of the first item either two players or three players should play at each table. Consider the following schedules:</p>
     <ul> 
      <li> First game: $$$1, 2, 3$$$ are played at the first table, and $$$4, 5$$$ at the second one. The second game: at the first table they play $$$5, 1$$$, and at the second &nbsp;— $$$2, 3, 4$$$. This schedule is <span class="tex-font-style-bf">not "fair"</span> since $$$b_2=2$$$ (the second player played twice at a big table) and $$$b_5=0$$$ (the fifth player did not play at a big table).</li>
      <li> First game: $$$1, 2, 3$$$ are played at the first table, and $$$4, 5$$$ at the second one. The second game: at the first table they play $$$4, 5, 2$$$, and at the second one &nbsp;— $$$1, 3$$$. This schedule is <span class="tex-font-style-bf">"fair"</span>: $$$b=[1,2,1,1,1]$$$ (any two values of $$$b_i$$$ differ by no more than $$$1$$$). </li>
     </ul>
     <p>Find any "fair" game schedule for $$$n$$$ people if they play on the $$$m$$$ tables of $$$k$$$ games.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains an integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.</p>
     <p>Each test case consists of one line that contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \le n \le 2\cdot10^5$$$, $$$1 \le m \le \lfloor\frac{n}{2}\rfloor$$$, $$$1 \le k \le 10^5$$$) — the number of people, tables and games, respectively.</p>
     <p>It is guaranteed that the sum of $$$nk$$$ ($$$n$$$ multiplied by $$$k$$$) over all test cases does not exceed $$$2\cdot10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print a required schedule &nbsp;— a sequence of $$$k$$$ blocks of $$$m$$$ lines. Each block corresponds to one game, a line in a block corresponds to one table. In each line print the number of players at the table and the indices of the players (numbers from $$$1$$$ to $$$n$$$) who should play at this table.</p>
     <p>If there are several required schedules, then output any of them. We can show that a valid solution always exists.</p>
     <p>You can output additional blank lines to separate responses to different sets of inputs.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
5 2 2
8 3 1
2 1 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3 1 2 3
2 4 5
3 4 5 2
2 1 3

2 6 2
3 3 5 1
3 4 7 8

2 2 1
2 2 1
2 2 1
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=F]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="G" data-uuid="ps_473c812e8bbf1d882416bfc888042d6425809a66"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      G. Unusual Minesweeper
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Polycarp is very fond of playing the game Minesweeper. Recently he found a similar game and there are such rules.</p>
     <p>There are mines on the field, for each the coordinates of its location are known ($$$x_i, y_i$$$). Each mine has a lifetime in seconds, after which it will explode. After the explosion, the mine also detonates all mines vertically and horizontally at a distance of $$$k$$$ (two perpendicular lines). As a result, we get an explosion on the field in the form of a "plus" symbol ('<span class="tex-font-style-bf">+</span>'). Thus, one explosion can cause new explosions, and so on.</p>
     <p>Also, Polycarp can detonate anyone mine every second, starting from zero seconds. After that, a chain reaction of explosions also takes place. Mines explode <span class="tex-font-style-bf">instantly</span> and also <span class="tex-font-style-bf">instantly</span> detonate other mines according to the rules described above.</p>
     <p>Polycarp wants to set a new record and asks you to help him calculate in what minimum number of seconds all mines can be detonated.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains an integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.</p>
     <p>An empty line is written in front of each test suite.</p>
     <p>Next comes a line that contains integers $$$n$$$ and $$$k$$$ ($$$1 \le n \le 2 \cdot 10^5$$$, $$$0 \le k \le 10^9$$$) — the number of mines and the distance that hit by mines during the explosion, respectively.</p>
     <p>Then $$$n$$$ lines follow, the $$$i$$$-th of which describes the $$$x$$$ and $$$y$$$ coordinates of the $$$i$$$-th mine and the time until its explosion ($$$-10^9 \le x, y \le 10^9$$$, $$$0 \le timer \le 10^9$$$). It is guaranteed that all mines have different coordinates.</p>
     <p>It is guaranteed that the sum of the values $$$n$$$ over all test cases in the test does not exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Print $$$t$$$ lines, each of the lines must contain the answer to the corresponding set of input data &nbsp;— the minimum number of seconds it takes to explode all the mines.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3

5 0
0 0 1
0 1 4
1 0 2
1 1 3
2 2 9

5 2
0 0 1
0 1 4
1 0 2
1 1 3
2 2 9

6 1
1 -1 3
0 -1 9
0 1 7
-1 0 1
-1 1 9
-1 -1 7
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>2
1
0
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <center> 
      <img class="tex-graphics" src="https://espresso.codeforces.com/95ba71e74099559b59b85c64082de6abb20d3f62.png" style="max-width: 100.0%;max-height: 100.0%;" width="378px"> <span class="tex-font-size-small">Picture from examples</span> 
     </center>
     <p>First example: </p>
     <ul>
      <li> $$$0$$$ second: we explode a mine at the cell $$$(2, 2)$$$, it does not detonate any other mine since $$$k=0$$$. </li>
      <li> $$$1$$$ second: we explode the mine at the cell $$$(0, 1)$$$, and the mine at the cell $$$(0, 0)$$$ explodes itself. </li>
      <li> $$$2$$$ second: we explode the mine at the cell $$$(1, 1)$$$, and the mine at the cell $$$(1, 0)$$$ explodes itself.</li>
     </ul>
     <p>Second example:</p>
     <ul> 
      <li> $$$0$$$ second: we explode a mine at the cell $$$(2, 2)$$$ we get: </li>
     </ul>
     <center> 
      <img class="tex-graphics" src="https://espresso.codeforces.com/39eed3efcd5ca0bf2cac8262b2fc289bf89e1829.png" style="max-width: 100.0%;max-height: 100.0%;" width="378px"> 
     </center>
     <ul> 
      <li> $$$1$$$ second: the mine at coordinate $$$(0, 0)$$$ explodes and since $$$k=2$$$ the explosion detonates mines at the cells $$$(0, 1)$$$ and $$$(1, 0)$$$, and their explosions detonate the mine at the cell $$$(1, 1)$$$ and there are no mines left on the field. </li>
     </ul>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=G]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 1em;"> 
 <div class="problemindexholder" problemindex="H" data-uuid="ps_14dac9a7d216e8cc4cc2f34c3f087fa4c3c8ea87"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      H. Permutation and Queries
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given a permutation $$$p$$$ of $$$n$$$ elements. A permutation of $$$n$$$ elements is an array of length $$$n$$$ containing each integer from $$$1$$$ to $$$n$$$ exactly once. For example, $$$[1, 2, 3]$$$ and $$$[4, 3, 5, 1, 2]$$$ are permutations, but $$$[1, 2, 4]$$$ and $$$[4, 3, 2, 1, 2]$$$ are not permutations. You should perform $$$q$$$ queries.</p>
     <p>There are two types of queries:</p>
     <ul> 
      <li> $$$1$$$ $$$x$$$ $$$y$$$ — swap $$$p_x$$$ and $$$p_y$$$. </li>
      <li> $$$2$$$ $$$i$$$ $$$k$$$ — print the number that $$$i$$$ will become if we assign $$$i = p_i$$$ $$$k$$$ times. </li>
     </ul>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \le n, q \le 10^5$$$).</p>
     <p>The second line contains $$$n$$$ integers $$$p_1, p_2, \dots, p_n$$$.</p>
     <p>Each of the next $$$q$$$ lines contains three integers. The first integer is $$$t$$$ ($$$1 \le t \le 2$$$) — type of query. If $$$t = 1$$$, then the next two integers are $$$x$$$ and $$$y$$$ ($$$1 \le x, y \le n$$$; $$$x \ne y$$$) — first-type query. If $$$t = 2$$$, then the next two integers are $$$i$$$ and $$$k$$$ ($$$1 \le i, k \le n$$$) — second-type query.</p>
     <p>It is guaranteed that there is at least one second-type query.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For every second-type query, print one integer in a new line — answer to this query.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5 4
5 3 4 2 1
2 3 1
2 1 2
1 1 3
2 1 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4
1
2
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5 9
2 3 5 1 4
2 3 5
2 5 5
2 5 1
2 5 3
2 5 4
1 5 4
2 5 3
2 2 5
2 5 1
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
5
4
2
3
3
3
1
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example $$$p = \{5, 3, 4, 2, 1\}$$$. </p>
     <p>The first query is to print $$$p_3$$$. The answer is $$$4$$$.</p>
     <p>The second query is to print $$$p_{p_1}$$$. The answer is $$$1$$$.</p>
     <p>The third query is to swap $$$p_1$$$ and $$$p_3$$$. Now $$$p = \{4, 3, 5, 2, 1\}$$$.</p>
     <p>The fourth query is to print $$$p_{p_1}$$$. The answer is $$$2$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=H]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div>
<div>
 <a href="https://codeforces.com/">Codeforces</a> (c) Copyright 2010-2021 Mike Mirzayanov
</div> 
<div>
 The only programming contests Web 2.0 platform
</div>
</body>
</html>