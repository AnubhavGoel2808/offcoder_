<!DOCTYPE html>
<html>
<head>
<style>
body{
    background-color: black;
    color: aliceblue;
    text-align: center;
     margin-left:20px;
    margin-right:20px;
}
.title{
    color: aquamarine;
}
.section-title{
    color: aqua;
}
pre{
text-align: left;
}
</style><script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}
    });
    MathJax.Hub.Register.StartupHook("End", function () {
        Codeforces.runMathJaxListeners();
    });
    </script>
    <script type="text/javascript" async
            src="https://mathjax.codeforces.org/MathJax.js?config=TeX-AMS_HTML-full"
    >
    </script><title>Page Title</title>
</head>
<body>
<div style="text-align: center; font-size: 1.8rem; margin-bottom: 0.5em;" class="caption">
 Codeforces Round #757 (Div. 2)
</div>
<div style="margin-bottom: 2em;"> 
 <style>
        #facebox .content:has(.diff-popup) {
            width: 90vw;
            max-width: 120rem !important;
        }

        .diff-popup {
            width: 90vw;
            max-width: 120rem !important;
            display: none;
            overflow: auto;
        }

        .input-output-copier {
            font-size: 1.2rem;
            float: right;
            color: #888 !important;
            cursor: pointer;
            border: 1px solid rgb(185, 185, 185);
            padding: 3px;
            margin: 1px;
            line-height: 1.1rem;
            text-transform: none;
        }

        .input-output-copier:hover {
            background-color: #def;
        }

        .test-explanation textarea {
            width: 100%;
            height: 1.5em;
        }

        .pending-submission-message {
            color: darkorange !important;
        }
    </style> 
 <script>
        const OPENING_SPACE = String.fromCharCode(1001);
        const CLOSING_SPACE = String.fromCharCode(1002);

        const nodeToText = function (node, pre) {
            let result = [];

            if (node.tagName === "SCRIPT" || node.tagName === "math"
                || (node.classList && node.classList.contains("input-output-copier")))
                return [];

            if (node.tagName === "NOBR") {
                result.push(OPENING_SPACE);
            }

            if (node.nodeType === Node.TEXT_NODE) {
                let s = node.textContent;
                if (!pre) {
                    s = s.replace(/\s+/g, " ");
                }
                if (s.length > 0) {
                    result.push(s);
                }
            }

            if (pre && node.tagName === "BR") {
                result.push("\n");
            }

            node.childNodes.forEach(function (child) {
                result.push(nodeToText(child, node.tagName === "PRE").join(""));
            });

            if (node.tagName === "DIV"
                || node.tagName === "P"
                || node.tagName === "PRE"
                || node.tagName === "UL"
                || node.tagName === "LI"
            ) {
                result.push("\n");
            }

            if (node.tagName === "NOBR") {
                result.push(CLOSING_SPACE);
            }

            return result;
        }

        const isSpecial = function (c) {
            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';
        }

        const convertStatementToText = function(statmentNode) {
            const text = nodeToText(statmentNode, false).join("").replace(/ +/g, " ").replace(/\n\n+/g, "\n\n");
            let result = [];
            for (let i = 0; i < text.length; i++) {
                const c = text.charAt(i);
                if (c === OPENING_SPACE) {
                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {
                        result.push('+');
                    }
                } else if (c === CLOSING_SPACE) {
                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {
                        result.push('-');
                    }
                } else {
                    result.push(c);
                }
            }
            return result.join("").split("\n").map(value => value.trim()).join("\n");
        };
    </script> 
 <div class="diff-popup"> 
 </div> 
 <div class="problemindexholder" problemindex="A" data-uuid="ps_d0656198b65df88488caeb60a60b2bd8c349835f"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      A. Divan and a Store
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Businessman <span class="tex-font-style-it">Divan</span> loves chocolate! Today he came to a store to buy some chocolate. Like all businessmen, <span class="tex-font-style-it">Divan</span> knows the value of money, so he will not buy too expensive chocolate. At the same time, too cheap chocolate tastes bad, so he will not buy it as well.</p>
     <p>The store he came to has $$$n$$$ different chocolate bars, and the price of the $$$i$$$-th chocolate bar is $$$a_i$$$ dollars. <span class="tex-font-style-it">Divan</span> considers a chocolate bar too expensive if it costs strictly more than $$$r$$$ dollars. Similarly, he considers a bar of chocolate to be too cheap if it costs strictly less than $$$l$$$ dollars. Divan will not buy too cheap or too expensive bars.</p>
     <p><span class="tex-font-style-it">Divan</span> is not going to spend all his money on chocolate bars, so he will spend at most $$$k$$$ dollars on chocolates.</p>
     <p>Please determine the maximum number of chocolate bars <span class="tex-font-style-it">Divan</span> can buy.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.</p>
     <p>The description of each test case consists of two lines. The first line contains integers $$$n$$$, $$$l$$$, $$$r$$$, $$$k$$$ ($$$1 \le n \le 100$$$, $$$1 \le l \le r \le 10^9$$$, $$$1 \le k \le 10^9$$$)&nbsp;— the lowest acceptable price of a chocolate, the highest acceptable price of a chocolate and Divan's total budget, respectively.</p>
     <p>The second line contains a sequence $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^9$$$) integers&nbsp;— the prices of chocolate bars in the store.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print a single integer — the maximum number of chocolate bars <span class="tex-font-style-it">Divan</span> can buy.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>8
3 1 100 100
50 100 50
6 3 5 10
1 2 3 4 5 6
6 3 5 21
1 2 3 4 5 6
10 50 69 100
20 30 40 77 1 1 12 4 70 10000
3 50 80 30
20 60 70
10 2 7 100
2 2 2 2 2 7 7 7 7 7
4 1000000000 1000000000 1000000000
1000000000 1000000000 1000000000 1000000000
1 1 1 1
1
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>2
2
3
0
0
10
1
1
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example <span class="tex-font-style-it">Divan</span> can buy chocolate bars $$$1$$$ and $$$3$$$ and spend $$$100$$$ dollars on them.</p>
     <p>In the second example <span class="tex-font-style-it">Divan</span> can buy chocolate bars $$$3$$$ and $$$4$$$ and spend $$$7$$$ dollars on them.</p>
     <p>In the third example <span class="tex-font-style-it">Divan</span> can buy chocolate bars $$$3$$$, $$$4$$$, and $$$5$$$ for $$$12$$$ dollars.</p>
     <p>In the fourth example <span class="tex-font-style-it">Divan</span> cannot buy any chocolate bar because each of them is either too cheap or too expensive.</p>
     <p>In the fifth example <span class="tex-font-style-it">Divan</span> cannot buy any chocolate bar because he considers the first bar too cheap, and has no budget for the second or third.</p>
     <p>In the sixth example <span class="tex-font-style-it">Divan</span> can buy all the chocolate bars in the shop.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=A]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {
        window.changedTests = new Set();
        console.log("Initialized window.changedTests.");

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");



        String.prototype.replaceAll = function (search, replace) {
            return this.split(search).join(replace);
        };

        $(".sample-test .title").each(function () {
            var preId = ("id" + Math.random()).replaceAll(".", "0");
            var cpyId = ("id" + Math.random()).replaceAll(".", "0");

            $(this).parent().find("pre").attr("id", preId);
            var $copy = $("<div title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier'>Copy</div>");
            $(this).append($copy);

            var clipboard = new Clipboard('#' + cpyId, {
                text: function (trigger) {
                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);
                }
            });

            var isInput = $(this).parent().hasClass("input");

            clipboard.on('success', function (e) {
                if (isInput) {
                    Codeforces.showMessage("The example input has been copied into the clipboard");
                } else {
                    Codeforces.showMessage("The example output has been copied into the clipboard");
                }
                e.clearSelection();
            });
        });

        $(".test-form-item input").change(function () {
            addPendingSubmissionMessage($($(this).closest("form")), "You changed the answer, do not forget to submit it if you want to save the changes");
            var index = $(this).closest(".problemindexholder").attr("problemindex");
            var test = "";
            $(this).closest("form input").each(function () {
                var test_ = $(this).attr("name");
                if (test_ && test_.substring(0, 4) === "test") {
                    test = test_;
                }
            });
            if (index.length > 0 && test.length > 0) {
                var indexTest = index + "::" + test;
                window.changedTests.add(indexTest);
            }
        });

        $(window).on('beforeunload', function () {
            if (window.changedTests.size > 0) {
                return 'Dialog text here';
            }
        });

        autosize($('.test-explanation textarea'));

    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="B" data-uuid="ps_3e8b60be1abb640866486c1ed099ae7becb65ff3"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      B. Divan and a New Project 
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>The company "Divan's Sofas" is planning to build $$$n + 1$$$ different buildings on a coordinate line so that: </p>
     <ul> 
      <li> the coordinate of each building is an integer number; </li>
      <li> no two buildings stand at the same point. </li>
     </ul>
     <p>Let $$$x_i$$$ be the coordinate of the $$$i$$$-th building. To get from the building $$$i$$$ to the building $$$j$$$, <span class="tex-font-style-it">Divan</span> spends $$$|x_i - x_j|$$$ minutes, where $$$|y|$$$ is the absolute value of $$$y$$$.</p>
     <p>All buildings that <span class="tex-font-style-it">Divan</span> is going to build can be numbered from $$$0$$$ to $$$n$$$. The businessman will live in the building $$$0$$$, the new headquarters of "Divan's Sofas". In the first ten years after construction <span class="tex-font-style-it">Divan</span> will visit the $$$i$$$-th building $$$a_i$$$ times, each time spending $$$2 \cdot |x_0-x_i|$$$ minutes for walking.</p>
     <p><span class="tex-font-style-it">Divan</span> asks you to choose the coordinates for all $$$n + 1$$$ buildings so that over the next ten years the businessman will spend as little time for walking as possible.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>Each test contains several test cases. The first line contains one integer number $$$t$$$ ($$$1 \le t \le 10^3$$$) — the number of test cases.</p>
     <p>The first line of each case contains an integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of buildings that "Divan's Sofas" is going to build, apart from the headquarters.</p>
     <p>The second line contains the sequence $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 10^6$$$), where $$$a_i$$$ is the number of visits to the $$$i$$$-th building.</p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, on the first line print the number $$$T$$$ — the minimum time <span class="tex-font-style-it">Divan</span> will spend walking. </p>
     <p>On the second line print the sequence $$$x_0, x_1, \ldots, x_n$$$ of $$$n + 1$$$ integers, where $$$x_i$$$ ($$$-10^6 \le x_i \le 10^6$$$) is the selected coordinate of the $$$i$$$-th building. It can be shown that an optimal answer exists with coordinates not exceeding $$$10^6$$$.</p>
     <p>If there are multiple answers, print any of them.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
3
1 2 3
5
3 8 10 6 1
5
1 1 1 1 1
1
0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>14
2 4 1 3
78
1 -1 0 2 3 4
18
3 6 1 5 2 4
0
1 2</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>Let's look at the first example.</p>
     <p><span class="tex-font-style-it">Divan</span> will visit the first building $$$a_1 = 1$$$ times, the second $$$a_2 = 2$$$ times and the third $$$a_3 = 3$$$ times. Then one of the optimal solution will be as follows: </p>
     <ol> 
      <li> the headquarters is located in $$$x_0 = 2$$$; </li>
      <li> $$$x_1 = 4$$$: <span class="tex-font-style-it">Divan</span> will spend $$$2 \cdot |x_0-x_1| \cdot a_1 = 2 \cdot |2-4| \cdot 1 = 4$$$ minutes walking to the first building; </li>
      <li> $$$x_2 = 1$$$: <span class="tex-font-style-it">Divan</span> will spend $$$2 \cdot |x_0-x_2| \cdot a_2 = 2 \cdot |2-1| \cdot 2 = 4$$$ minutes walking to the second building; </li>
      <li> $$$x_3 = 3$$$: <span class="tex-font-style-it">Divan</span> will spend $$$2 \cdot |x_0-x_3| \cdot a_3 = 2 \cdot |2-3| \cdot 3 = 6$$$ minutes walking to the third building. </li>
     </ol>
     <p>In total, <span class="tex-font-style-it">Divan</span> will spend $$$4 + 4 + 6 = 14$$$ minutes. It can be shown that it is impossible to arrange buildings so that the businessman spends less time.</p>
     <p>Among others, $$$x = [1, 3, 2, 0]$$$, $$$x = [-5, -3, -6, -4]$$$ are also correct answers for the first example.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=B]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="C" data-uuid="ps_4ec318ff7a20f5c5b13addccd9d6ce1d595aaa2f"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      C. Divan and bitwise operations
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Once <span class="tex-font-style-it">Divan</span> analyzed a sequence $$$a_1, a_2, \ldots, a_n$$$ consisting of $$$n$$$ non-negative integers as follows. He considered each non-empty <span class="tex-font-style-it">subsequence</span> of the sequence $$$a$$$, computed the <a href="https://en.wikipedia.org/wiki/Bitwise_operation#XOR">bitwise XOR</a> of its elements and added up all the XORs, obtaining the <span class="tex-font-style-it">coziness</span> of the sequence $$$a$$$.</p>
     <p>A sequence $$$c$$$ is a <span class="tex-font-style-it">subsequence</span> of a sequence $$$d$$$ if $$$c$$$ can be obtained from $$$d$$$ by deletion of several (possibly, zero or all) elements. For example, $$$[1, \, 2, \, 3, \, 4]$$$, $$$[2, \, 4]$$$, and $$$[2]$$$ are subsequences of $$$[1, \, 2, \, 3, \, 4]$$$, but $$$[4, \, 3]$$$ and $$$[0]$$$ are not.</p>
     <p><span class="tex-font-style-it">Divan</span> was very proud of his analysis, but now he lost the sequence $$$a$$$, and also the coziness value! However, <span class="tex-font-style-it">Divan</span> remembers the value of <a href="https://en.wikipedia.org/wiki/Bitwise_operation#OR">bitwise OR</a> on $$$m$$$ contiguous subsegments of the sequence $$$a$$$. It turns out that each element of the original sequence is contained in <span class="tex-font-style-bf">at least one</span> of these $$$m$$$ segments.</p>
     <p><span class="tex-font-style-it">Divan</span> asks you to help find the coziness of the sequence $$$a$$$ using the information he remembers. If several coziness values are possible, print any.</p>
     <p>As the result can be very large, print the value modulo $$$10^9 + 7$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains one integer number $$$t$$$ ($$$1 \le t \le 10^3$$$) — the number of test cases.</p>
     <p>The first line of each test case contains two integer numbers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 2 \cdot 10^5$$$) — the length of the sequence and the number of contiguous segments whose bitwise OR values <span class="tex-font-style-it">Divan</span> remembers, respectively.</p>
     <p>The following $$$m$$$ lines describe the segments, one per line.</p>
     <p>Each segment is described with three integers $$$l$$$, $$$r$$$, and $$$x$$$ ($$$1 \le l \le r \le n$$$, $$$0 \le x \le 2^{30} - 1$$$) — the first and last elements of the segment and the bitwise OR of $$$a_l, a_{l + 1}, \ldots, a_r$$$, respectively.</p>
     <p>It is guaranteed that each element of the sequence is contained in at least one of the segments. It is guaranteed that there exists a sequence that satisfies all constraints.</p>
     <p>It is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \cdot 10^5$$$. </p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print the coziness any suitable sequence $$$a$$$ modulo $$$10^9 + 7$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
2 1
1 2 2
3 2
1 3 5
2 3 5
5 4
1 2 7
3 3 7
4 4 0
4 5 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4
20
112
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In first example, one of the sequences that fits the constraints is $$$[0, 2]$$$. Consider all its non-empty subsequences:</p>
     <ul> 
      <li> $$$[0]$$$: the bitwise XOR of this subsequence is $$$0$$$; </li>
      <li> $$$[2]$$$: the bitwise XOR of this subsequence is $$$2$$$; </li>
      <li> $$$[0, 2]$$$: the bitwise XOR of this subsequence is $$$2$$$. </li>
     </ul>
     <p>The sum of all results is $$$4$$$, so it is the answer.</p>
     <p>In second example, one of the sequences that fits the constraints is $$$[0, \, 5, \, 5]$$$.</p>
     <p>In third example, one of the sequences that fits the constraints is $$$[5, \, 6, \, 7, \, 0, \, 2]$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=C]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D1" data-uuid="ps_354124679ef2b7c67a0a52a770d0cb5d1eabd899"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D1. Divan and Kostomuksha (easy version)
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>1024 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p><span class="tex-font-style-bf">This is the easy version of the problem. The only difference is maximum value of $$$a_i$$$.</span></p>
     <p>Once in <span class="tex-font-style-it">Kostomuksha</span> <span class="tex-font-style-it">Divan</span> found an array $$$a$$$ consisting of positive integers. Now he wants to reorder the elements of $$$a$$$ to maximize the value of the following function: $$$$$$\sum_{i=1}^n \operatorname{gcd}(a_1, \, a_2, \, \dots, \, a_i),$$$$$$ where $$$\operatorname{gcd}(x_1, x_2, \ldots, x_k)$$$ denotes the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor">greatest common divisor</a> of integers $$$x_1, x_2, \ldots, x_k$$$, and $$$\operatorname{gcd}(x) = x$$$ for any integer $$$x$$$.</p>
     <p>Reordering elements of an array means changing the order of elements in the array arbitrary, or leaving the initial order.</p>
     <p>Of course, <span class="tex-font-style-it">Divan</span> can solve this problem. However, he found it interesting, so he decided to share it with you.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$n$$$ ($$$1 \leq n \leq 10^5$$$) — the size of the array $$$a$$$.</p>
     <p>The second line contains $$$n$$$ integers $$$a_{1}, \, a_{2}, \, \dots, \, a_{n}$$$ ($$$1 \le a_{i} \le 5 \cdot 10^6$$$) — the array $$$a$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Output the maximum value of the function that you can get by reordering elements of the array $$$a$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>6
2 3 1 2 6 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>14</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>10
5 7 10 3 1 10 100 3 42 54
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>131</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example, it's optimal to rearrange the elements of the given array in the following order: $$$[6, \, 2, \, 2, \, 2, \, 3, \, 1]$$$:</p>
     <p>$$$$$$\operatorname{gcd}(a_1) + \operatorname{gcd}(a_1, \, a_2) + \operatorname{gcd}(a_1, \, a_2, \, a_3) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4, \, a_5) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4, \, a_5, \, a_6) = 6 + 2 + 2 + 2 + 1 + 1 = 14.$$$$$$ It can be shown that it is impossible to get a better answer.</p>
     <p>In the second example, it's optimal to rearrange the elements of a given array in the following order: $$$[100, \, 10, \, 10, \, 5, \, 1, \, 3, \, 3, \, 7, \, 42, \, 54]$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D1]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D2" data-uuid="ps_110578f736a1dc86149124844cfbfd245e46cd88"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D2. Divan and Kostomuksha (hard version)
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>1024 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p><span class="tex-font-style-bf">This is the hard version of the problem. The only difference is maximum value of $$$a_i$$$.</span></p>
     <p>Once in <span class="tex-font-style-it">Kostomuksha</span> <span class="tex-font-style-it">Divan</span> found an array $$$a$$$ consisting of positive integers. Now he wants to reorder the elements of $$$a$$$ to maximize the value of the following function: $$$$$$\sum_{i=1}^n \operatorname{gcd}(a_1, \, a_2, \, \dots, \, a_i),$$$$$$ where $$$\operatorname{gcd}(x_1, x_2, \ldots, x_k)$$$ denotes the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor">greatest common divisor</a> of integers $$$x_1, x_2, \ldots, x_k$$$, and $$$\operatorname{gcd}(x) = x$$$ for any integer $$$x$$$.</p>
     <p>Reordering elements of an array means changing the order of elements in the array arbitrary, or leaving the initial order.</p>
     <p>Of course, <span class="tex-font-style-it">Divan</span> can solve this problem. However, he found it interesting, so he decided to share it with you.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$n$$$ ($$$1 \leq n \leq 10^5$$$) — the size of the array $$$a$$$.</p>
     <p>The second line contains $$$n$$$ integers $$$a_{1}, \, a_{2}, \, \dots, \, a_{n}$$$ ($$$1 \le a_{i} \le 2 \cdot 10^7$$$) — the array $$$a$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Output the maximum value of the function that you can get by reordering elements of the array $$$a$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>6
2 3 1 2 6 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>14</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>10
5 7 10 3 1 10 100 3 42 54
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>131</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example, it's optimal to rearrange the elements of the given array in the following order: $$$[6, \, 2, \, 2, \, 2, \, 3, \, 1]$$$:</p>
     <p>$$$$$$\operatorname{gcd}(a_1) + \operatorname{gcd}(a_1, \, a_2) + \operatorname{gcd}(a_1, \, a_2, \, a_3) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4, \, a_5) + \operatorname{gcd}(a_1, \, a_2, \, a_3, \, a_4, \, a_5, \, a_6) = 6 + 2 + 2 + 2 + 1 + 1 = 14.$$$$$$ It can be shown that it is impossible to get a better answer.</p>
     <p>In the second example, it's optimal to rearrange the elements of a given array in the following order: $$$[100, \, 10, \, 10, \, 5, \, 1, \, 3, \, 3, \, 7, \, 42, \, 54]$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D2]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 1em;"> 
 <div class="problemindexholder" problemindex="E" data-uuid="ps_9e3b8bc83fcb7af99ac4bdfa094b4ca77b65291c"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      E. Divan and a Cottage
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>1024 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p><span class="tex-font-style-it">Divan</span>'s new cottage is finally complete! However, after a thorough inspection, it turned out that the workers had installed the insulation incorrectly, and now the temperature in the house directly depends on the temperature outside. More precisely, if the temperature in the house is $$$P$$$ in the morning, and the street temperature is $$$T$$$, then by the next morning the temperature in the house changes according to the following rule: </p>
     <ul> 
      <li> $$$P_{new} = P + 1$$$, if $$$P &lt; T$$$, </li>
      <li> $$$P_{new} = P - 1$$$, if $$$P &gt; T$$$, </li>
      <li> $$$P_{new} = P$$$, if $$$P = T$$$. </li>
     </ul> Here $$$P_{new}$$$ is the temperature in the house next morning.
     <p><span class="tex-font-style-it">Divan</span> is a very busy businessman, so sometimes he is not at home for long periods and does not know what the temperature is there now, so he hired you to find it. You will work for $$$n$$$ days. In the beginning of the $$$i$$$-th day, the temperature outside $$$T_i$$$ is first given to you. After that, on the $$$i$$$-th day, you will receive $$$k_i$$$ queries. Each query asks the following: "if the temperature in the house was $$$x_i$$$ at the morning of the <span class="tex-font-style-bf">first</span> day, what would be the temperature in the house next morning (after day $$$i$$$)?"</p>
     <p>Please answer all the businessman's queries.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains the number $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the number of days.</p>
     <p>The following is a description of $$$n$$$ days in the following format.</p>
     <p>The first line of the description contains an integer $$$T_i$$$ ($$$0 \leq T_i \leq 10^9$$$) — the temperature on that day.</p>
     <p>The second line contains a non-negative integer $$$k_i$$$ ($$$0 \le k_i \le 2 \cdot 10^5$$$) — the number of queries that day.</p>
     <p>The third line contains $$$k$$$ integers $$$x'_i$$$ ($$$0 \leq x'_{i} \leq 10^9$$$) — the encrypted version of Divan's queries.</p>
     <p>Let $$$lastans = 0$$$ initially. Divan's actual queries are given by $$$x_i = (x'_i + lastans) \bmod (10^9 + 1)$$$, where $$$a \bmod b$$$ is the reminder when $$$a$$$ is divided by $$$b$$$. After answering the query, set $$$lastans$$$ to the answer.</p>
     <p>It is guaranteed that the total number of queries (the sum of all $$$k_i$$$) does not exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each query, output a single integer — the temperature in the house after day $$$i$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
50
3
1 2 3
50
3
4 5 6
0
3
7 8 9
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>2
5
9
15
22
30
38
47
53
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
728
3
859 1045 182
104
1
689
346
6
634 356 912 214 1 1
755
3
241 765 473
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>858
1902
2083
2770
3401
3754
4663
4874
4872
4870
5107
5868
6337
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>2
500000000
3
1000000000 999999999 888888888
250000000
5
777777777 666666666 555555555 444444444 333333333
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>999999999
999999996
888888882
666666656
333333321
888888874
333333317
666666648
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>Let's look at the first four queries from the example input.</p>
     <p>The temperature is $$$50$$$ on the first day, $$$50$$$ on the second day, and $$$0$$$ on the third day.</p>
     <p>Note that $$$lastans = 0$$$ initially.</p>
     <ul>
      <li> The initial temperature of the first query of the first day is $$$(1 \, + \, lastans) \bmod (10^9 + 1) = 1$$$. After the first day, the temperature rises by $$$1$$$, because $$$1 &lt; 50$$$. So the answer to the query is $$$2$$$. Then, we set $$$lastans = 2$$$.</li>
      <li> The initial temperature of the second query of the first day is $$$(2 \, + \, lastans) \bmod (10^9 + 1) = 4$$$. After the first day, the temperature rises by $$$1$$$, because $$$4 &lt; 50$$$. So the answer to the query is $$$5$$$. Then, we set $$$lastans = 5$$$.</li>
      <li> The initial temperature of the third query of the first day is $$$(3 \, + \, lastans) \bmod (10^9 + 1) = 8$$$. After the first day, the temperature rises by $$$1$$$. So the answer to the query is $$$9$$$. Then, we set $$$lastans = 9$$$.</li>
      <li> The initial temperature of the first query of the second day is $$$(4 \, + \, lastans) \bmod (10^9 + 1) = 13$$$. After the first day, the temperature rises by $$$1$$$. After the second day, the temperature rises by $$$1$$$. So the answer to the query is $$$15$$$. Then, we set $$$lastans = 15$$$.</li>
     </ul>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=E]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/16812");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div>
<div>
 <a href="https://codeforces.com/">Codeforces</a> (c) Copyright 2010-2021 Mike Mirzayanov
</div> 
<div>
 The only programming contests Web 2.0 platform
</div>
</body>
</html>