<!DOCTYPE html>
<html>
<head>
<style>
body{
    background-color: #212121;
    color: aliceblue;
    text-align: center;
     margin-left:20px;
    margin-right:20px;
}
.title{
    color: aquamarine;
}
.section-title{
    color: aqua;
}
pre{
text-align: left;
}
</style><script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}
    });
    MathJax.Hub.Register.StartupHook("End", function () {
        Codeforces.runMathJaxListeners();
    });
    </script>
    <script type="text/javascript" async
            src="https://mathjax.codeforces.org/MathJax.js?config=TeX-AMS_HTML-full"
    >
    </script><title>Page Title</title>
</head>
<body>
<div style="text-align: center; font-size: 1.8rem; margin-bottom: 0.5em;" class="caption">
 Codeforces Round #758 (Div.1 + Div. 2)
</div>
<div style="margin-bottom: 2em;"> 
 <style>
        #facebox .content:has(.diff-popup) {
            width: 90vw;
            max-width: 120rem !important;
        }

        .diff-popup {
            width: 90vw;
            max-width: 120rem !important;
            display: none;
            overflow: auto;
        }

        .input-output-copier {
            font-size: 1.2rem;
            float: right;
            color: #888 !important;
            cursor: pointer;
            border: 1px solid rgb(185, 185, 185);
            padding: 3px;
            margin: 1px;
            line-height: 1.1rem;
            text-transform: none;
        }

        .input-output-copier:hover {
            background-color: #def;
        }

        .test-explanation textarea {
            width: 100%;
            height: 1.5em;
        }

        .pending-submission-message {
            color: darkorange !important;
        }
    </style> 
 <script>
        const OPENING_SPACE = String.fromCharCode(1001);
        const CLOSING_SPACE = String.fromCharCode(1002);

        const nodeToText = function (node, pre) {
            let result = [];

            if (node.tagName === "SCRIPT" || node.tagName === "math"
                || (node.classList && node.classList.contains("input-output-copier")))
                return [];

            if (node.tagName === "NOBR") {
                result.push(OPENING_SPACE);
            }

            if (node.nodeType === Node.TEXT_NODE) {
                let s = node.textContent;
                if (!pre) {
                    s = s.replace(/\s+/g, " ");
                }
                if (s.length > 0) {
                    result.push(s);
                }
            }

            if (pre && node.tagName === "BR") {
                result.push("\n");
            }

            node.childNodes.forEach(function (child) {
                result.push(nodeToText(child, node.tagName === "PRE").join(""));
            });

            if (node.tagName === "DIV"
                || node.tagName === "P"
                || node.tagName === "PRE"
                || node.tagName === "UL"
                || node.tagName === "LI"
            ) {
                result.push("\n");
            }

            if (node.tagName === "NOBR") {
                result.push(CLOSING_SPACE);
            }

            return result;
        }

        const isSpecial = function (c) {
            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';
        }

        const convertStatementToText = function(statmentNode) {
            const text = nodeToText(statmentNode, false).join("").replace(/ +/g, " ").replace(/\n\n+/g, "\n\n");
            let result = [];
            for (let i = 0; i < text.length; i++) {
                const c = text.charAt(i);
                if (c === OPENING_SPACE) {
                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {
                        result.push('+');
                    }
                } else if (c === CLOSING_SPACE) {
                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {
                        result.push('-');
                    }
                } else {
                    result.push(c);
                }
            }
            return result.join("").split("\n").map(value => value.trim()).join("\n");
        };
    </script> 
 <div class="diff-popup"> 
 </div> 
 <div class="problemindexholder" problemindex="A" data-uuid="ps_725f432443a5f68f437054ab2f307f89b1f92031"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      A. Find Array
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Given $$$n$$$, find any array $$$a_1, a_2, \ldots, a_n$$$ of integers such that all of the following conditions hold: </p>
     <ul>
      <li><p>$$$1 \le a_i \le 10^9$$$ for every $$$i$$$ from $$$1$$$ to $$$n$$$.</p></li>
      <li><p>$$$a_1 &lt; a_2 &lt; \ldots &lt;a_n$$$</p></li>
      <li><p>For every $$$i$$$ from $$$2$$$ to $$$n$$$, $$$a_i$$$ isn't divisible by $$$a_{i-1}$$$</p></li>
     </ul>
     <p>It can be shown that such an array always exists under the constraints of the problem.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.</p>
     <p>The only line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 1000$$$).</p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ — the array you found. If there are multiple arrays satisfying all the conditions, print any of them.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
1
2
7
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1
2 3
111 1111 11111 111111 1111111 11111111 111111111</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case, array $$$[1]$$$ satisfies all the conditions.</p>
     <p>In the second test case, array $$$[2, 3]$$$ satisfies all the conditions, as $$$2&lt;3$$$ and $$$3$$$ is not divisible by $$$2$$$.</p>
     <p>In the third test case, array $$$[111, 1111, 11111, 111111, 1111111, 11111111, 111111111]$$$ satisfies all the conditions, as it's increasing and $$$a_i$$$ isn't divisible by $$$a_{i-1}$$$ for any $$$i$$$ from $$$2$$$ to $$$7$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=A]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {
        window.changedTests = new Set();
        console.log("Initialized window.changedTests.");

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");



        String.prototype.replaceAll = function (search, replace) {
            return this.split(search).join(replace);
        };

        $(".sample-test .title").each(function () {
            var preId = ("id" + Math.random()).replaceAll(".", "0");
            var cpyId = ("id" + Math.random()).replaceAll(".", "0");

            $(this).parent().find("pre").attr("id", preId);
            var $copy = $("<div title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier'>Copy</div>");
            $(this).append($copy);

            var clipboard = new Clipboard('#' + cpyId, {
                text: function (trigger) {
                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);
                }
            });

            var isInput = $(this).parent().hasClass("input");

            clipboard.on('success', function (e) {
                if (isInput) {
                    Codeforces.showMessage("The example input has been copied into the clipboard");
                } else {
                    Codeforces.showMessage("The example output has been copied into the clipboard");
                }
                e.clearSelection();
            });
        });

        $(".test-form-item input").change(function () {
            addPendingSubmissionMessage($($(this).closest("form")), "You changed the answer, do not forget to submit it if you want to save the changes");
            var index = $(this).closest(".problemindexholder").attr("problemindex");
            var test = "";
            $(this).closest("form input").each(function () {
                var test_ = $(this).attr("name");
                if (test_ && test_.substring(0, 4) === "test") {
                    test = test_;
                }
            });
            if (index.length > 0 && test.length > 0) {
                var indexTest = index + "::" + test;
                window.changedTests.add(indexTest);
            }
        });

        $(window).on('beforeunload', function () {
            if (window.changedTests.size > 0) {
                return 'Dialog text here';
            }
        });

        autosize($('.test-explanation textarea'));

    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="B" data-uuid="ps_9e23864b59236072f7961d8c63fac82fa177451d"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      B. Build the Permutation
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given three integers $$$n, a, b$$$. Determine if there exists a permutation $$$p_1, p_2, \ldots, p_n$$$ of integers from $$$1$$$ to $$$n$$$, such that:</p>
     <ul>
      <li><p>There are exactly $$$a$$$ integers $$$i$$$ with $$$2 \le i \le n-1$$$ such that $$$p_{i-1} &lt; p_i &gt; p_{i+1}$$$ (in other words, there are exactly $$$a$$$ local maximums).</p></li>
      <li><p>There are exactly $$$b$$$ integers $$$i$$$ with $$$2 \le i \le n-1$$$ such that $$$p_{i-1} &gt; p_i &lt; p_{i+1}$$$ (in other words, there are exactly $$$b$$$ local minimums).</p></li>
     </ul>
     <p>If such permutations exist, find any such permutation.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of test cases follows.</p>
     <p>The only line of each test case contains three integers $$$n$$$, $$$a$$$ and $$$b$$$ ($$$2 \leq n \leq 10^5$$$, $$$0 \leq a,b \leq n$$$).</p>
     <p>The sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, if there is no permutation with the requested properties, output $$$-1$$$.</p>
     <p>Otherwise, print the permutation that you are found. If there are several such permutations, you may print any of them.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
4 1 1
6 1 2
6 4 0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1 3 2 4
4 2 3 1 5 6
-1
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case, one example of such permutations is $$$[1, 3, 2, 4]$$$. In it $$$p_1 &lt; p_2 &gt; p_3$$$, and $$$2$$$ is the only such index, and $$$p_2&gt; p_3 &lt; p_4$$$, and $$$3$$$ the only such index.</p>
     <p>One can show that there is no such permutation for the third test case.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=B]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="C" data-uuid="ps_b15b9770d7d4ce8dda3631af81f367cef9fc6c23"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      C. Game Master
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>$$$n$$$ players are playing a game. </p>
     <p>There are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. </p>
     <p>You are the game master and want to organize a tournament. There will be a total of $$$n-1$$$ battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. </p>
     <p>In the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 100$$$) — the number of test cases. The description of test cases follows.</p>
     <p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 10^5$$$) — the number of players.</p>
     <p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \leq a_i \leq 10^9$$$, $$$a_i \neq a_j$$$ for $$$i \neq j$$$), where $$$a_i$$$ is the strength of the $$$i$$$-th player on the first map. </p>
     <p>The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \dots, b_n$$$ ($$$1 \leq b_i \leq 10^9$$$, $$$b_i \neq b_j$$$ for $$$i \neq j$$$), where $$$b_i$$$ is the strength of the $$$i$$$-th player on the second map. </p>
     <p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case print a string of length $$$n$$$. $$$i$$$-th character should be "<span class="tex-font-style-tt">1</span>" if the $$$i$$$-th player can win the tournament, or "<span class="tex-font-style-tt">0</span>" otherwise.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
4
1 2 3 4
1 2 3 4
4
11 12 20 21
44 22 11 30
1
1000000000
1000000000
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>0001
1111
1
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case, the $$$4$$$-th player will beat any other player on any game, so he will definitely win the tournament.</p>
     <p>In the second test case, everyone can be a winner. </p>
     <p>In the third test case, there is only one player. Clearly, he will win the tournament.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=C]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D" data-uuid="ps_073cc7384754ee30f8ad8e20661b5b8a929d2bc6"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D. Dominoes
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>1 second
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given $$$n$$$ dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren't yet.</p>
     <p>The coloring is said to be <span class="tex-font-style-bf">valid</span> if and only if it is possible to rearrange the dominoes in some order such that for each $$$1 \le i \le n$$$ the color of the right cell of the $$$i$$$-th domino is different from the color of the left cell of the $$$((i \bmod n)+1)$$$-st domino. </p>
     <p>Note that you can't rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell.</p>
     <p>Count the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings <span class="tex-font-style-tt">BW</span> <span class="tex-font-style-tt">WB</span> and <span class="tex-font-style-tt">WB</span> <span class="tex-font-style-tt">BW</span> different (and both invalid).</p>
     <p>As this number can be very big, output it modulo $$$998\,244\,353$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains a single integer $$$n$$$ ($$$1 \le n \le 10^5$$$) — the number of dominoes.</p>
     <p>The next $$$n$$$ lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character <span class="tex-font-style-tt">B</span> means that the corresponding cell is black, character <span class="tex-font-style-tt">W</span> means that the corresponding cell is white, and <span class="tex-font-style-tt">?</span> means that the cell is yet to be colored. </p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Print a single integer — the answer to the problem.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>1
?W
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>1
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>2
??
W?
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>2
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
BB
??
W?
??
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>10
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first test case, there is only one domino, and we need the color of its right cell to be different from the color of its left cell. There is only one way to achieve this.</p>
     <p>In the second test case, there are only $$$2$$$ such colorings:</p>
     <p><span class="tex-font-style-tt">BB</span> <span class="tex-font-style-tt">WW</span> and <span class="tex-font-style-tt">WB</span> <span class="tex-font-style-tt">WB</span>.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="E" data-uuid="ps_00e82bdbbcec3e878da7e6da8759d3f3d5881c93"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      E. The Cells on the Paper
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>On an endless checkered sheet of paper, $$$n$$$ cells are chosen and colored in three colors, where $$$n$$$ is divisible by $$$3$$$. It turns out that there are exactly $$$\frac{n}{3}$$$ marked cells of each of three colors! </p>
     <p>Find the largest such $$$k$$$ that it's possible to choose $$$\frac{k}{3}$$$ cells of each color, remove all other marked cells, and then select three rectangles with sides parallel to the grid lines so that the following conditions hold:</p>
     <ul> 
      <li> No two rectangles can intersect (but they can share a part of the boundary). In other words, the area of intersection of any two of these rectangles must be $$$0$$$.</li>
      <li> The $$$i$$$-th rectangle contains all the chosen cells of the $$$i$$$-th color and no chosen cells of other colors, for $$$i = 1, 2, 3$$$. </li>
     </ul>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains a single integer $$$n$$$ — the number of the marked cells ($$$3 \leq n \le 10^5$$$, $$$n$$$ is divisible by 3).</p>
     <p>The $$$i$$$-th of the following $$$n$$$ lines contains three integers $$$x_i$$$, $$$y_i$$$, $$$c_i$$$ ($$$|x_i|,|y_i| \leq 10^9$$$; $$$1 \leq c_i \leq 3$$$), where $$$(x_i, y_i)$$$ are the coordinates of the $$$i$$$-th marked cell and $$$c_i$$$ is its color.</p>
     <p>It's guaranteed that all cells $$$(x_i, y_i)$$$ in the input are distinct, and that there are exactly $$$\frac{n}{3}$$$ cells of each color.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Output a single integer $$$k$$$ — the largest number of cells you can leave.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>9
2 3 1
4 1 2
2 1 3
3 4 1
5 3 2
4 4 3
2 4 1
5 2 2
3 5 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>6
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3
1 1 1
2 2 2
3 3 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first sample, it's possible to leave $$$6$$$ cells with indexes $$$1, 5, 6, 7, 8, 9$$$.</p>
     <p>In the second sample, it's possible to leave $$$3$$$ cells with indexes $$$1, 2, 3$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=E]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="F" data-uuid="ps_4ee9cfdcf86bf7923872978ee603661aba44a255"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      F. MEX counting
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>For an array $$$c$$$ of nonnegative integers, $$$MEX(c)$$$ denotes the smallest nonnegative integer that doesn't appear in it. For example, $$$MEX([0, 1, 3]) = 2$$$, $$$MEX([42]) = 0$$$.</p>
     <p>You are given integers $$$n, k$$$, and an array $$$[b_1, b_2, \ldots, b_n]$$$.</p>
     <p>Find the number of arrays $$$[a_1, a_2, \ldots, a_n]$$$, for which the following conditions hold:</p>
     <ul>
      <li><p>$$$0 \le a_i \le n$$$ for each $$$i$$$ for each $$$i$$$ from $$$1$$$ to $$$n$$$.</p></li>
      <li><p>$$$|MEX([a_1, a_2, \ldots, a_i]) - b_i| \le k$$$ for each $$$i$$$ from $$$1$$$ to $$$n$$$.</p></li>
     </ul>
     <p>As this number can be very big, output it modulo $$$998\,244\,353$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains two integers $$$n, k$$$ ($$$1 \le n \le 2000$$$, $$$0 \le k \le 50$$$).</p>
     <p>The second line of the input contains $$$n$$$ integers $$$b_1, b_2, \ldots, b_n$$$ ($$$-k \le b_i \le n+k$$$)&nbsp;— elements of the array $$$b$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Output a single integer&nbsp;— the number of arrays which satisfy the conditions from the statement, modulo $$$998\,244\,353$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4 0
0 0 0 0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>256
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4 1
0 0 0 0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>431
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4 1
0 0 1 1
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>509
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5 2
0 0 2 2 0
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>6546
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>3 2
-2 0 4
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>11
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=F]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 1em;"> 
 <div class="problemindexholder" problemindex="G" data-uuid="ps_44e92df2a6a16b3e999d9b862b300eec2fe57784"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      G. Alphabetic Tree
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>3 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given $$$m$$$ strings and a tree on $$$n$$$ nodes. Each edge has some letter written on it.</p>
     <p>You have to answer $$$q$$$ queries. Each query is described by $$$4$$$ integers $$$u$$$, $$$v$$$, $$$l$$$ and $$$r$$$. The answer to the query is the total number of occurrences of $$$str(u,v)$$$ in strings with indices from $$$l$$$ to $$$r$$$. $$$str(u,v)$$$ is defined as the string that is made by concatenating letters written on the edges on the shortest path from $$$u$$$ to $$$v$$$ (in order that they are traversed).</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line of the input contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ ($$$2 \le n \le 10^5$$$, $$$1 \le m,q \le 10^5$$$).</p>
     <p>The $$$i$$$-th of the following $$$n-1$$$ lines contains two integers $$$u_i, v_i$$$ and a lowercase Latin letter $$$c_i$$$ ($$$1 \le u_i, v_i \le n$$$, $$$u_i \neq v_i$$$), denoting the edge between nodes $$$u_i, v_i$$$ with a character $$$c_i$$$ on it. </p>
     <p>It's guaranteed that these edges form a tree.</p>
     <p>The following $$$m$$$ lines contain the strings consisting of lowercase Latin letters. The total length of those strings does not exceed $$$10^5$$$.</p>
     <p>Then $$$q$$$ lines follow, each containing four integers $$$u$$$, $$$v$$$, $$$l$$$ and $$$r$$$ ($$$1 \le u,v \le n$$$, $$$u \neq v$$$, $$$1 \le l \le r \le m$$$), denoting the queries. </p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each query print a single integer — the answer to the query.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>2 5 3
1 2 a
aab
abab
aaa
b
a
2 1 1 5
1 2 1 3
2 1 3 5
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>8
7
4
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>9 5 6
1 2 a
2 7 c
1 3 b
3 4 b
4 6 b
3 5 a
5 8 b
5 9 c
ababa
cabbb
bac
bbbac
abacaba
2 7 1 4
2 5 1 5
6 3 4 4
6 9 4 5
5 7 3 5
5 3 1 5
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
4
2
1
1
10
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=G]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div>
<div>
 <a href="https://codeforces.com/">Codeforces</a> (c) Copyright 2010-2021 Mike Mirzayanov
</div> 
<div>
 The only programming contests Web 2.0 platform
</div>
</body>
</html>