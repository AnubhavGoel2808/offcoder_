<!DOCTYPE html>
<html>
<head>
<style>
body{
    background-color: #212121;
    color: aliceblue;
    text-align: center;
     margin-left:20px;
    margin-right:20px;
}
.title{
    color: aquamarine;
}
.section-title{
    color: aqua;
}
pre{
text-align: left;
}
</style><script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {inlineMath: [['$$$','$$$']], displayMath: [['$$$$$$','$$$$$$']]}
    });
    MathJax.Hub.Register.StartupHook("End", function () {
        Codeforces.runMathJaxListeners();
    });
    </script>
    <script type="text/javascript" async
            src="https://mathjax.codeforces.org/MathJax.js?config=TeX-AMS_HTML-full"
    >
    </script><title>Page Title</title>
</head>
<body>
<div style="text-align: center; font-size: 1.8rem; margin-bottom: 0.5em;" class="caption">
 Educational Codeforces Round 118 (Rated for Div. 2)
</div>
<div style="margin-bottom: 2em;"> 
 <style>
        #facebox .content:has(.diff-popup) {
            width: 90vw;
            max-width: 120rem !important;
        }

        .diff-popup {
            width: 90vw;
            max-width: 120rem !important;
            display: none;
            overflow: auto;
        }

        .input-output-copier {
            font-size: 1.2rem;
            float: right;
            color: #888 !important;
            cursor: pointer;
            border: 1px solid rgb(185, 185, 185);
            padding: 3px;
            margin: 1px;
            line-height: 1.1rem;
            text-transform: none;
        }

        .input-output-copier:hover {
            background-color: #def;
        }

        .test-explanation textarea {
            width: 100%;
            height: 1.5em;
        }

        .pending-submission-message {
            color: darkorange !important;
        }
    </style> 
 <script>
        const OPENING_SPACE = String.fromCharCode(1001);
        const CLOSING_SPACE = String.fromCharCode(1002);

        const nodeToText = function (node, pre) {
            let result = [];

            if (node.tagName === "SCRIPT" || node.tagName === "math"
                || (node.classList && node.classList.contains("input-output-copier")))
                return [];

            if (node.tagName === "NOBR") {
                result.push(OPENING_SPACE);
            }

            if (node.nodeType === Node.TEXT_NODE) {
                let s = node.textContent;
                if (!pre) {
                    s = s.replace(/\s+/g, " ");
                }
                if (s.length > 0) {
                    result.push(s);
                }
            }

            if (pre && node.tagName === "BR") {
                result.push("\n");
            }

            node.childNodes.forEach(function (child) {
                result.push(nodeToText(child, node.tagName === "PRE").join(""));
            });

            if (node.tagName === "DIV"
                || node.tagName === "P"
                || node.tagName === "PRE"
                || node.tagName === "UL"
                || node.tagName === "LI"
            ) {
                result.push("\n");
            }

            if (node.tagName === "NOBR") {
                result.push(CLOSING_SPACE);
            }

            return result;
        }

        const isSpecial = function (c) {
            return c === ',' || c === '.' || c === ';' || c === ')' || c === ' ';
        }

        const convertStatementToText = function(statmentNode) {
            const text = nodeToText(statmentNode, false).join("").replace(/ +/g, " ").replace(/\n\n+/g, "\n\n");
            let result = [];
            for (let i = 0; i < text.length; i++) {
                const c = text.charAt(i);
                if (c === OPENING_SPACE) {
                    if (!((i > 0 && text.charAt(i - 1) === '(') || (result.length > 0 && result[result.length - 1] === ' '))) {
                        result.push('+');
                    }
                } else if (c === CLOSING_SPACE) {
                    if (!(i + 1 < text.length && isSpecial(text.charAt(i + 1)))) {
                        result.push('-');
                    }
                } else {
                    result.push(c);
                }
            }
            return result.join("").split("\n").map(value => value.trim()).join("\n");
        };
    </script> 
 <div class="diff-popup"> 
 </div> 
 <div class="problemindexholder" problemindex="A" data-uuid="ps_76083e3e3b14485ac3169e94e5030f475770d737"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      A. Long Comparison
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer $$$x$$$ with $$$p$$$ zeros appended to its end.</p>
     <p>Now Monocarp asks you to compare these two numbers. Can you help him?</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$)&nbsp;— the number of testcases.</p>
     <p>The first line of each testcase contains two integers $$$x_1$$$ and $$$p_1$$$ ($$$1 \le x_1 \le 10^6; 0 \le p_1 \le 10^6$$$)&nbsp;— the description of the first number.</p>
     <p>The second line of each testcase contains two integers $$$x_2$$$ and $$$p_2$$$ ($$$1 \le x_2 \le 10^6; 0 \le p_2 \le 10^6$$$)&nbsp;— the description of the second number.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '&lt;'. If the first number is greater than the second one, print '&gt;'. If they are equal, print '='.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5
2 1
19 0
10 2
100 1
1999 0
2 3
1 0
1 0
99 0
1 2
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>&gt;
=
&lt;
=
&lt;
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>The comparisons in the example are: $$$20 &gt; 19$$$, $$$1000 = 1000$$$, $$$1999 &lt; 2000$$$, $$$1 = 1$$$, $$$99 &lt; 100$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=A]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {
        window.changedTests = new Set();
        console.log("Initialized window.changedTests.");

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");



        String.prototype.replaceAll = function (search, replace) {
            return this.split(search).join(replace);
        };

        $(".sample-test .title").each(function () {
            var preId = ("id" + Math.random()).replaceAll(".", "0");
            var cpyId = ("id" + Math.random()).replaceAll(".", "0");

            $(this).parent().find("pre").attr("id", preId);
            var $copy = $("<div title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier'>Copy</div>");
            $(this).append($copy);

            var clipboard = new Clipboard('#' + cpyId, {
                text: function (trigger) {
                    return Codeforces.filterClipboardText(document.querySelector('#' + preId).innerText);
                }
            });

            var isInput = $(this).parent().hasClass("input");

            clipboard.on('success', function (e) {
                if (isInput) {
                    Codeforces.showMessage("The example input has been copied into the clipboard");
                } else {
                    Codeforces.showMessage("The example output has been copied into the clipboard");
                }
                e.clearSelection();
            });
        });

        $(".test-form-item input").change(function () {
            addPendingSubmissionMessage($($(this).closest("form")), "You changed the answer, do not forget to submit it if you want to save the changes");
            var index = $(this).closest(".problemindexholder").attr("problemindex");
            var test = "";
            $(this).closest("form input").each(function () {
                var test_ = $(this).attr("name");
                if (test_ && test_.substring(0, 4) === "test") {
                    test = test_;
                }
            });
            if (index.length > 0 && test.length > 0) {
                var indexTest = index + "::" + test;
                window.changedTests.add(indexTest);
            }
        });

        $(window).on('beforeunload', function () {
            if (window.changedTests.size > 0) {
                return 'Dialog text here';
            }
        });

        autosize($('.test-explanation textarea'));

    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="B" data-uuid="ps_87e035fec48223351e1cb708b6743e01c09a9840"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      B. Absent Remainder
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given a sequence $$$a_1, a_2, \dots, a_n$$$ consisting of $$$n$$$ pairwise distinct positive integers.</p>
     <p>Find $$$\left\lfloor \frac n 2 \right\rfloor$$$ different pairs of integers $$$x$$$ and $$$y$$$ such that: </p>
     <ul> 
      <li> $$$x \neq y$$$; </li>
      <li> $$$x$$$ and $$$y$$$ appear in $$$a$$$; </li>
      <li> $$$x~mod~y$$$ doesn't appear in $$$a$$$. </li>
     </ul>
     <p>Note that some $$$x$$$ or $$$y$$$ can belong to multiple pairs.</p>
     <p>$$$\lfloor x \rfloor$$$ denotes the floor function&nbsp;— the largest integer less than or equal to $$$x$$$. $$$x~mod~y$$$ denotes the remainder from dividing $$$x$$$ by $$$y$$$.</p>
     <p>If there are multiple solutions, print any of them. It can be shown that at least one solution always exists.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$)&nbsp;— the number of testcases.</p>
     <p>The first line of each testcase contains a single integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$)&nbsp;— the length of the sequence.</p>
     <p>The second line of each testcase contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^6$$$).</p>
     <p>All numbers in the sequence are pairwise distinct. The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>The answer for each testcase should contain $$$\left\lfloor \frac n 2 \right\rfloor$$$ different pairs of integers $$$x$$$ and $$$y$$$ such that $$$x \neq y$$$, $$$x$$$ and $$$y$$$ appear in $$$a$$$ and $$$x~mod~y$$$ doesn't appear in $$$a$$$. Print the pairs one after another.</p>
     <p>You can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is $$$x$$$ and the second number is $$$y$$$. All pairs should be pairwise distinct.</p>
     <p>If there are multiple solutions, print any of them.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
2
1 4
4
2 8 3 4
5
3 8 5 9 7
6
2 7 5 3 4 8
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4 1
8 2
8 4
9 5
7 5
8 7
4 3
5 2</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first testcase there are only two pairs: $$$(1, 4)$$$ and $$$(4, 1)$$$. $$$\left\lfloor \frac 2 2 \right\rfloor=1$$$, so we have to find one pair. $$$1~mod~4=1$$$, and $$$1$$$ appears in $$$a$$$, so that pair is invalid. Thus, the only possible answer is a pair $$$(4, 1)$$$.</p>
     <p>In the second testcase, we chose pairs $$$8~mod~2=0$$$ and $$$8~mod~4=0$$$. $$$0$$$ doesn't appear in $$$a$$$, so that answer is valid. There are multiple possible answers for that testcase.</p>
     <p>In the third testcase, the chosen pairs are $$$9~mod~5=4$$$ and $$$7~mod~5=2$$$. Neither $$$4$$$, nor $$$2$$$, appears in $$$a$$$, so that answer is valid.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=B]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="C" data-uuid="ps_431c3013d4cdbade0e1baedde716e90fa7c5163f"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      C. Poisoned Dagger
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Monocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts $$$100^{500}$$$ seconds, during which Monocarp attacks the dragon with a poisoned dagger. The $$$i$$$-th attack is performed at the beginning of the $$$a_i$$$-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals $$$1$$$ damage during each of the next $$$k$$$ seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).</p>
     <p>For example, suppose $$$k = 4$$$, and Monocarp stabs the dragon during the seconds $$$2$$$, $$$4$$$ and $$$10$$$. Then the poison effect is applied at the start of the $$$2$$$-nd second and deals $$$1$$$ damage during the $$$2$$$-nd and $$$3$$$-rd seconds; then, at the beginning of the $$$4$$$-th second, the poison effect is reapplied, so it deals exactly $$$1$$$ damage during the seconds $$$4$$$, $$$5$$$, $$$6$$$ and $$$7$$$; then, during the $$$10$$$-th second, the poison effect is applied again, and it deals $$$1$$$ damage during the seconds $$$10$$$, $$$11$$$, $$$12$$$ and $$$13$$$. In total, the dragon receives $$$10$$$ damage.</p>
     <p>Monocarp knows that the dragon has $$$h$$$ hit points, and if he deals at least $$$h$$$ damage to the dragon during the battle — he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of $$$k$$$ (the number of seconds the poison effect lasts) that is enough to deal at least $$$h$$$ damage to the dragon.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 1000$$$)&nbsp;— the number of test cases.</p>
     <p>The first line of the test case contains two integers $$$n$$$ and $$$h$$$ ($$$1 \le n \le 100; 1 \le h \le 10^{18}$$$)&nbsp;— the number of Monocarp's attacks and the amount of damage that needs to be dealt.</p>
     <p>The second line contains $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$1 \le a_i \le 10^9; a_i &lt; a_{i + 1}$$$), where $$$a_i$$$ is the second when the $$$i$$$-th attack is performed.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, print a single integer&nbsp;— the minimum value of the parameter $$$k$$$, such that Monocarp will cause at least $$$h$$$ damage to the dragon.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
2 5
1 5
3 10
2 4 10
5 3
1 2 4 5 7
4 1000
3 25 64 1337
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>3
4
1
470
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example, for $$$k=3$$$, damage is dealt in seconds $$$[1, 2, 3, 5, 6, 7]$$$.</p>
     <p>In the second example, for $$$k=4$$$, damage is dealt in seconds $$$[2, 3, 4, 5, 6, 7, 10, 11, 12, 13]$$$.</p>
     <p>In the third example, for $$$k=1$$$, damage is dealt in seconds $$$[1, 2, 4, 5, 7]$$$.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=C]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="D" data-uuid="ps_1ad075f47cff8a475f1692770a471e99a0dd7e25"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      D. MEX Sequences
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>256 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>Let's call a sequence of integers $$$x_1, x_2, \dots, x_k$$$ <span class="tex-font-style-it">MEX-correct</span> if for all $$$i$$$ ($$$1 \le i \le k$$$) $$$|x_i - \operatorname{MEX}(x_1, x_2, \dots, x_i)| \le 1$$$ holds. Where $$$\operatorname{MEX}(x_1, \dots, x_k)$$$ is the minimum non-negative integer that doesn't belong to the set $$$x_1, \dots, x_k$$$. For example, $$$\operatorname{MEX}(1, 0, 1, 3) = 2$$$ and $$$\operatorname{MEX}(2, 1, 5) = 0$$$.</p>
     <p>You are given an array $$$a$$$ consisting of $$$n$$$ non-negative integers. Calculate the number of non-empty <span class="tex-font-style-it">MEX-correct</span> subsequences of a given array. The number of subsequences can be very large, so print it modulo $$$998244353$$$. </p>
     <p>Note: a subsequence of an array $$$a$$$ is a sequence $$$[a_{i_1}, a_{i_2}, \dots, a_{i_m}]$$$ meeting the constraints $$$1 \le i_1 &lt; i_2 &lt; \dots &lt; i_m \le n$$$. If two different ways to choose the sequence of indices $$$[i_1, i_2, \dots, i_m]$$$ yield the same subsequence, the resulting subsequence should be counted twice (i. e. two subsequences are different if their sequences of indices $$$[i_1, i_2, \dots, i_m]$$$ are not the same).</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^5$$$)&nbsp;— the number of test cases.</p>
     <p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 5 \cdot 10^5$$$).</p>
     <p>The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$0 \le a_i \le n$$$).</p>
     <p>The sum of $$$n$$$ over all test cases doesn't exceed $$$5 \cdot 10^5$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each test case, print a single integer&nbsp;— the number of non-empty <span class="tex-font-style-it">MEX-correct</span> subsequences of a given array, taken modulo $$$998244353$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
3
0 2 1
2
1 0
5
0 0 0 0 0
4
0 1 2 3
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>4
2
31
7
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first example, the valid subsequences are $$$[0]$$$, $$$[1]$$$, $$$[0,1]$$$ and $$$[0,2]$$$.</p>
     <p>In the second example, the valid subsequences are $$$[0]$$$ and $$$[1]$$$.</p>
     <p>In the third example, any non-empty subsequence is valid. </p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=D]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 2em;"> 
 <div class="problemindexholder" problemindex="E" data-uuid="ps_8b18efbf5dfa4dd36eac4fce2bb9e376d632aa1e"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      E. Crazy Robot
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>2 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>512 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>There is a grid, consisting of $$$n$$$ rows and $$$m$$$ columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.</p>
     <p>A crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: "move right", "move down", "move left" or "move up". Each command means moving to a neighbouring cell in the corresponding direction.</p>
     <p>However, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.</p>
     <p>We want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains a single integer $$$t$$$ ($$$1 \le t \le 1000$$$)&nbsp;— the number of testcases.</p>
     <p>The first line of each testcase contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 10^6$$$; $$$n \cdot m \le 10^6$$$)&nbsp;— the number of rows and the number of columns in the grid.</p>
     <p>The $$$i$$$-th of the next $$$n$$$ lines provides a description of the $$$i$$$-th row of the grid. It consists of $$$m$$$ elements of one of three types: </p>
     <ul> 
      <li> '.'&nbsp;— the cell is free; </li>
      <li> '#'&nbsp;— the cell is blocked; </li>
      <li> 'L'&nbsp;— the cell contains a lab. </li>
     </ul>
     <p>The grid contains exactly one lab. The sum of $$$n \cdot m$$$ over all testcases doesn't exceed $$$10^6$$$.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>For each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Example
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>4
3 3
...
.L.
...
4 5
#....
..##L
...#.
.....
1 1
L
1 9
....L..#.
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>...
.L.
...
#++++
..##L
...#+
...++
L
++++L++#.
</pre>
      </div>
     </div>
    </div>
    <div class="note">
     <div class="section-title">
      Note
     </div>
     <p>In the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.</p>
     <p>In the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.</p>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=E]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div> 
<div style="margin-bottom: 1em;"> 
 <div class="problemindexholder" problemindex="F" data-uuid="ps_fd62f9129504e959bef803024feef2fd060b8df0"> 
  <div style="display: none; margin:1em 0;text-align: center; position: relative;" class="alert alert-info diff-notifier"> 
   <div>
    The problem statement has recently been changed. <a class="view-changes" href="#">View the changes.</a>
   </div> <span class="diff-notifier-close" style="position: absolute; top: 0.2em; right: 0.3em; cursor: pointer; font-size: 1.4em;">×</span> 
  </div> 
  <div class="ttypography">
   <div class="problem-statement">
    <div class="header">
     <div class="title">
      F. Tree Coloring
     </div>
     <div class="time-limit">
      <div class="property-title">
       time limit per test
      </div>4.5 seconds
     </div>
     <div class="memory-limit">
      <div class="property-title">
       memory limit per test
      </div>512 megabytes
     </div>
     <div class="input-file">
      <div class="property-title">
       input
      </div>standard input
     </div>
     <div class="output-file">
      <div class="property-title">
       output
      </div>standard output
     </div>
    </div>
    <div>
     <p>You are given a rooted tree consisting of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. The root of the tree is the vertex $$$1$$$.</p>
     <p>You have to color all vertices of the tree into $$$n$$$ colors (also numbered from $$$1$$$ to $$$n$$$) so that there is exactly one vertex for each color. Let $$$c_i$$$ be the color of vertex $$$i$$$, and $$$p_i$$$ be the parent of vertex $$$i$$$ in the rooted tree. The coloring is considered beautiful if there is no vertex $$$k$$$ ($$$k &gt; 1$$$) such that $$$c_k = c_{p_k} - 1$$$, i. e. no vertex such that its color is less than the color of its parent by <span class="tex-font-style-bf">exactly $$$1$$$</span>.</p>
     <p>Calculate the number of beautiful colorings, and print it modulo $$$998244353$$$.</p>
    </div>
    <div class="input-specification">
     <div class="section-title">
      Input
     </div>
     <p>The first line contains one integer $$$n$$$ ($$$2 \le n \le 250000$$$) — the number of vertices in the tree.</p>
     <p>Then $$$n-1$$$ lines follow, the $$$i$$$-th line contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \le x_i, y_i \le n$$$; $$$x_i \ne y_i$$$) denoting an edge between the vertex $$$x_i$$$ and the vertex $$$y_i$$$. These edges form a tree.</p>
    </div>
    <div class="output-specification">
     <div class="section-title">
      Output
     </div>
     <p>Print one integer — the number of beautiful colorings, taken modulo $$$998244353$$$.</p>
    </div>
    <div class="sample-tests">
     <div class="section-title">
      Examples
     </div>
     <div class="sample-test">
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5
1 2
3 2
4 2
2 5
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>42
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>5
1 2
2 3
3 4
4 5
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>53
</pre>
      </div>
      <div class="input">
       <div class="title">
        Input
       </div>
       <pre>20
20 19
20 4
12 4
5 8
1 2
20 7
3 10
7 18
11 8
9 10
17 10
1 15
11 16
14 11
18 10
10 1
14 2
13 17
20 6
</pre>
      </div>
      <div class="output">
       <div class="title">
        Output
       </div>
       <pre>955085064
</pre>
      </div>
     </div>
    </div>
   </div>
   <p> </p>
  </div> 
 </div> 
 <script>
        $(function () {
            Codeforces.addMathJaxListener(function () {
                let $problem = $("div[problemindex=F]");
                let uuid = $problem.attr("data-uuid");
                let statementText = convertStatementToText($problem.find(".ttypography").get(0));

                let previousStatementText = Codeforces.getFromStorage(uuid);
                if (previousStatementText) {
                    if (previousStatementText !== statementText) {
                        $problem.find(".diff-notifier").show();

                        $problem.find(".diff-notifier-close").click(function() {
                            Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                            $problem.find(".diff-notifier").hide();
                        });

                        $problem.find("a.view-changes").click(function() {
                            $.post("/data/diff", {action: "getDiff", a: previousStatementText, b: statementText}, function (result) {
                                if (result["success"] === "true") {
                                    Codeforces.facebox(".diff-popup", "//codeforces.org/s/11992");
                                    $("#facebox .diff-popup").html(result["diff"]);
                                }
                            }, "json");
                        });
                    }
                } else {
                    Codeforces.putToStorageTtl(uuid, statementText, 6 * 60 * 60);
                }
            });
        });
    </script> 
 <script type="text/javascript">
    $(document).ready(function () {

        function endsWith(string, suffix) {
            return string.indexOf(suffix, string.length - suffix.length) !== -1;
        }

        var inputFileDiv = $("div.input-file");
        var inputFile = inputFileDiv.text();
        var outputFileDiv = $("div.output-file");
        var outputFile = outputFileDiv.text();


        if (!endsWith(inputFile, "standard input")
            && !endsWith(inputFile, "standard input")) {
            inputFileDiv.attr("style", "font-weight: bold");
        }

        if (!endsWith(outputFile, "standard output")
            && !endsWith(outputFile, "standard output")) {
            outputFileDiv.attr("style", "font-weight: bold");
        }

        var titleDiv = $("div.header div.title");




    });
</script> 
</div>
<div>
 <a href="https://codeforces.com/">Codeforces</a> (c) Copyright 2010-2021 Mike Mirzayanov
</div> 
<div>
 The only programming contests Web 2.0 platform
</div>
</body>
</html>